#!/usr/bin/env python3
"""
BACKTEST CLI ENHANCED - DADOS HIST√ìRICOS REAIS DA API BYBIT V5 + GEST√ÉO DE CAPITAL
Sistema de Trading Automatizado - Suporte a m√∫ltiplas estrat√©gias combinadas + Capital Inicial
"""

import asyncio
import json
import logging
import os
import sys
import time
import hmac
import hashlib
import requests
from datetime import datetime, timedelta
from pathlib import Path
from typing import Dict, List, Optional, Tuple

# Importar o CapitalManager
from capital_manager import CapitalManager, CapitalConfig, create_default_capital_config

# Configurar logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('backtest_enhanced.log'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

class BybitAPIV5RealData:
    """Cliente para API V5 da Bybit - Dados Hist√≥ricos Reais"""
    
    def __init__(self):
        # Tentar carregar credenciais de m√∫ltiplas fontes
        self.api_key = None
        self.api_secret = None
        
        # 1. Tentar vari√°veis de ambiente primeiro
        self.api_key = os.getenv('BYBIT_API_KEY')
        self.api_secret = os.getenv('BYBIT_API_SECRET')
        
        # 2. Se n√£o encontrar, tentar arquivo de configura√ß√£o
        if not self.api_key or not self.api_secret:
            self._load_credentials_from_config()
        
        # 3. Verificar se conseguiu carregar
        if not self.api_key or not self.api_secret:
            raise ValueError(
                "‚ùå Credenciais da API Bybit n√£o encontradas!\n"
                "Configure uma das op√ß√µes:\n"
                "1. Vari√°veis de ambiente: BYBIT_API_KEY e BYBIT_API_SECRET\n"
                "2. Arquivo config/exchange_settings.json com as chaves da API"
            )
        
        self.base_url = 'https://api.bybit.com'
        
        print(f"‚úÖ API Bybit configurada: {self.api_key[:8]}...")
        
        # Timeframes suportados pela API
        self.timeframe_mapping = {
            '1m': '1',
            '3m': '3', 
            '5m': '5',
            '15m': '15',
            '30m': '30',
            '1h': '60',
            '2h': '120',
            '4h': '240',
            '6h': '360',
            '12h': '720',
            '1d': 'D',
            '1w': 'W',
            '1M': 'M'
        }
    
    def _load_credentials_from_config(self):
        """Carrega credenciais do arquivo de configura√ß√£o"""
        try:
            config_path = 'config/exchange_settings.json'
            
            if not os.path.exists(config_path):
                print(f"‚ö†Ô∏è  Arquivo {config_path} n√£o encontrado")
                return
            
            print(f"üîÑ Carregando credenciais de {config_path}...")
            
            with open(config_path, 'r') as f:
                config = json.load(f)
            
            # Verificar se tem configura√ß√£o da Bybit
            if 'exchanges' in config and 'bybit' in config['exchanges']:
                bybit_config = config['exchanges']['bybit']
                
                # Tentar diferentes formatos de configura√ß√£o
                if 'api_key' in bybit_config and 'api_secret' in bybit_config:
                    # Formato direto
                    self.api_key = bybit_config['api_key']
                    self.api_secret = bybit_config['api_secret']
                    print("‚úÖ Credenciais carregadas diretamente do arquivo")
                    
                elif 'api_key_env' in bybit_config and 'api_secret_env' in bybit_config:
                    # Formato com nomes de vari√°veis de ambiente
                    api_key_env = bybit_config['api_key_env']
                    api_secret_env = bybit_config['api_secret_env']
                    
                    self.api_key = os.getenv(api_key_env)
                    self.api_secret = os.getenv(api_secret_env)
                    
                    if self.api_key and self.api_secret:
                        print(f"‚úÖ Credenciais carregadas das vari√°veis {api_key_env} e {api_secret_env}")
                    else:
                        print(f"‚ö†Ô∏è  Vari√°veis {api_key_env} e {api_secret_env} n√£o encontradas")
                
                else:
                    print("‚ö†Ô∏è  Formato de configura√ß√£o da Bybit n√£o reconhecido")
            
            else:
                print("‚ö†Ô∏è  Configura√ß√£o da Bybit n√£o encontrada no arquivo")
                
        except Exception as e:
            print(f"‚ö†Ô∏è  Erro ao carregar configura√ß√£o: {e}")
    
    def test_connection(self) -> bool:
        """Testa conex√£o com a API"""
        try:
            print("üîÑ Testando conex√£o com API Bybit...")
            
            # Endpoint p√∫blico (n√£o requer autentica√ß√£o)
            response = requests.get(f"{self.base_url}/v5/market/time", timeout=10)
            
            if response.status_code == 200:
                data = response.json()
                server_time = data['result']['timeSecond']
                print(f"‚úÖ Conex√£o OK - Server Time: {server_time}")
                return True
            else:
                print(f"‚ùå Erro na conex√£o: {response.status_code}")
                return False
                
        except Exception as e:
            print(f"‚ùå Erro de conex√£o: {e}")
            return False
    
    def get_historical_klines(self, symbol: str, interval: str, start_time: str, end_time: str) -> List[Dict]:
        """Obt√©m dados hist√≥ricos reais da API Bybit"""
        try:
            print(f"üìä Obtendo dados hist√≥ricos: {symbol} {interval} de {start_time} a {end_time}")
            
            # Converter datas para timestamps
            start_timestamp = int(datetime.strptime(start_time, '%Y-%m-%d').timestamp() * 1000)
            end_timestamp = int(datetime.strptime(end_time, '%Y-%m-%d').timestamp() * 1000)
            
            # Mapear timeframe
            bybit_interval = self.timeframe_mapping.get(interval)
            if not bybit_interval:
                raise ValueError(f"Timeframe {interval} n√£o suportado")
            
            all_data = []
            current_start = start_timestamp
            
            # API Bybit retorna m√°ximo 1000 candles por request
            max_candles_per_request = 1000
            
            while current_start < end_timestamp:
                print(f"   üìà Buscando dados a partir de {datetime.fromtimestamp(current_start/1000).strftime('%Y-%m-%d %H:%M')}")
                
                # Par√¢metros da requisi√ß√£o
                params = {
                    'category': 'linear',  # Futuros USDT
                    'symbol': symbol,
                    'interval': bybit_interval,
                    'start': current_start,
                    'end': min(current_start + (max_candles_per_request * self._get_interval_ms(interval)), end_timestamp),
                    'limit': max_candles_per_request
                }
                
                # Fazer requisi√ß√£o
                response = requests.get(
                    f"{self.base_url}/v5/market/kline",
                    params=params,
                    timeout=30
                )
                
                if response.status_code != 200:
                    print(f"‚ùå Erro na API: {response.status_code} - {response.text}")
                    break
                
                data = response.json()
                
                if data['retCode'] != 0:
                    print(f"‚ùå Erro da API: {data['retMsg']}")
                    break
                
                klines = data['result']['list']
                
                if not klines:
                    print("   ‚ö†Ô∏è  Sem mais dados dispon√≠veis")
                    break
                
                # Processar dados (API retorna em ordem decrescente)
                klines.reverse()  # Ordenar cronologicamente
                
                for kline in klines:
                    timestamp_ms = int(kline[0])
                    
                    # Evitar duplicatas
                    if timestamp_ms <= current_start:
                        continue
                    
                    # Converter para formato padr√£o
                    candle = {
                        'timestamp': datetime.fromtimestamp(timestamp_ms / 1000).isoformat(),
                        'open': float(kline[1]),
                        'high': float(kline[2]),
                        'low': float(kline[3]),
                        'close': float(kline[4]),
                        'volume': float(kline[5]),
                        'turnover': float(kline[6]) if len(kline) > 6 else 0
                    }
                    
                    all_data.append(candle)
                    current_start = timestamp_ms
                
                print(f"   ‚úÖ Obtidos {len(klines)} candles - Total: {len(all_data)}")
                
                # Rate limiting - evitar excesso de requisi√ß√µes
                time.sleep(0.1)
                
                # Atualizar para pr√≥xima itera√ß√£o
                if klines:
                    current_start = int(klines[-1][0]) + 1
                else:
                    break
            
            print(f"‚úÖ Total de dados obtidos: {len(all_data)} candles")
            
            if not all_data:
                raise ValueError("Nenhum dado hist√≥rico obtido da API")
            
            # Validar qualidade dos dados
            self._validate_real_data(all_data, symbol, interval)
            
            return all_data
            
        except Exception as e:
            logger.error(f"Erro ao obter dados hist√≥ricos: {e}")
            raise
    
    def _get_interval_ms(self, interval: str) -> int:
        """Converte intervalo para milissegundos"""
        mapping = {
            '1m': 60 * 1000,
            '3m': 3 * 60 * 1000,
            '5m': 5 * 60 * 1000,
            '15m': 15 * 60 * 1000,
            '30m': 30 * 60 * 1000,
            '1h': 60 * 60 * 1000,
            '2h': 2 * 60 * 60 * 1000,
            '4h': 4 * 60 * 60 * 1000,
            '6h': 6 * 60 * 60 * 1000,
            '12h': 12 * 60 * 60 * 1000,
            '1d': 24 * 60 * 60 * 1000,
            '1w': 7 * 24 * 60 * 60 * 1000
        }
        return mapping.get(interval, 60 * 1000)
    
    def _validate_real_data(self, data: List[Dict], symbol: str, interval: str):
        """Valida dados reais obtidos da API"""
        if len(data) < 10:
            raise ValueError(f"Dados insuficientes: apenas {len(data)} candles")
        
        # Verificar integridade dos dados
        for i, candle in enumerate(data[:5]):  # Verificar primeiros 5
            if candle['high'] < candle['low']:
                raise ValueError(f"Dados inv√°lidos no candle {i}: High < Low")
            if candle['high'] < max(candle['open'], candle['close']):
                raise ValueError(f"Dados inv√°lidos no candle {i}: High < max(Open, Close)")
            if candle['low'] > min(candle['open'], candle['close']):
                raise ValueError(f"Dados inv√°lidos no candle {i}: Low > min(Open, Close)")
        
        # Verificar varia√ß√£o de pre√ßos
        prices = [d['close'] for d in data]
        price_range = (max(prices) - min(prices)) / min(prices)
        
        print(f"‚úÖ Dados reais validados:")
        print(f"   üìä {len(data)} candles de {symbol}")
        print(f"   üìà Varia√ß√£o de pre√ßos: {price_range:.2%}")
        print(f"   üìÖ Per√≠odo: {data[0]['timestamp'][:10]} a {data[-1]['timestamp'][:10]}")

class RealDataIndicators:
    """Indicadores t√©cnicos para dados reais"""
    
    @staticmethod
    def ema(prices: List[float], period: int) -> List[float]:
        """M√©dia m√≥vel exponencial"""
        if len(prices) < period:
            return [prices[0] if prices else 0] * len(prices)
        
        multiplier = 2 / (period + 1)
        ema_values = [0] * len(prices)
        
        # Primeira EMA √© a m√©dia simples
        ema_values[period-1] = sum(prices[:period]) / period
        
        # Calcular EMA para o resto
        for i in range(period, len(prices)):
            ema_values[i] = (prices[i] * multiplier) + (ema_values[i-1] * (1 - multiplier))
        
        # Preencher valores iniciais
        for i in range(period-1):
            ema_values[i] = ema_values[period-1]
        
        return ema_values
    
    @staticmethod
    def rsi(prices: List[float], period: int = 14) -> List[float]:
        """RSI (Relative Strength Index)"""
        if len(prices) < period + 1:
            return [50] * len(prices)
        
        deltas = [prices[i] - prices[i-1] for i in range(1, len(prices))]
        gains = [max(delta, 0) for delta in deltas]
        losses = [abs(min(delta, 0)) for delta in deltas]
        
        rsi_values = [50] * len(prices)
        
        # Primeira m√©dia
        avg_gain = sum(gains[:period]) / period
        avg_loss = sum(losses[:period]) / period
        
        for i in range(period, len(deltas)):
            avg_gain = (avg_gain * (period - 1) + gains[i]) / period
            avg_loss = (avg_loss * (period - 1) + losses[i]) / period
            
            if avg_loss == 0:
                rsi_values[i + 1] = 100
            else:
                rs = avg_gain / avg_loss
                rsi_values[i + 1] = 100 - (100 / (1 + rs))
        
        return rsi_values
    
    @staticmethod
    def bollinger_bands(prices: List[float], period: int = 20, std_dev: float = 2) -> Tuple[List[float], List[float], List[float]]:
        """Bandas de Bollinger"""
        if len(prices) < period:
            return [prices[0]] * len(prices), [prices[0]] * len(prices), [prices[0]] * len(prices)
        
        middle = []  # SMA
        upper = []
        lower = []
        
        for i in range(len(prices)):
            if i < period - 1:
                window = prices[:i+1]
            else:
                window = prices[i-period+1:i+1]
            
            sma = sum(window) / len(window)
            
            # Calcular desvio padr√£o
            variance = sum((x - sma) ** 2 for x in window) / len(window)
            std = variance ** 0.5
            
            middle.append(sma)
            upper.append(sma + (std_dev * std))
            lower.append(sma - (std_dev * std))
        
        return middle, upper, lower

class RealDataStrategyEngine:
    """Engine de estrat√©gias para dados reais"""
    
    def __init__(self):
        self.indicators = RealDataIndicators()
        
        self.strategies = {
            'ema_crossover': self._ema_crossover_strategy,
            'rsi_mean_reversion': self._rsi_mean_reversion_strategy,
            'bollinger_breakout': self._bollinger_breakout_strategy
        }
        
        self.strategy_configs = {
            'ema_crossover': {
                'name': 'EMA Crossover (Dados Reais)',
                'description': 'Cruzamento de m√©dias m√≥veis exponenciais com dados hist√≥ricos reais',
                'params': {'fast_ema': 12, 'slow_ema': 26, 'volume_filter': True},
                'risk_level': 'medium',
                'best_timeframes': ['15m', '30m', '1h'],
                'market_conditions': 'Tendencial'
            },
            'rsi_mean_reversion': {
                'name': 'RSI Mean Reversion (Dados Reais)',
                'description': 'Revers√£o √† m√©dia com RSI em dados hist√≥ricos reais',
                'params': {'rsi_period': 14, 'oversold': 30, 'overbought': 70},
                'risk_level': 'low',
                'best_timeframes': ['5m', '15m', '30m'],
                'market_conditions': 'Lateral'
            },
            'bollinger_breakout': {
                'name': 'Bollinger Breakout (Dados Reais)',
                'description': 'Rompimento de bandas de Bollinger com dados hist√≥ricos reais',
                'params': {'bb_period': 20, 'bb_std': 2.0, 'volume_filter': True},
                'risk_level': 'high',
                'best_timeframes': ['15m', '1h', '4h'],
                'market_conditions': 'Vol√°til'
            }
        }
    
    def _ema_crossover_strategy(self, data: List[Dict], config: Dict) -> List[Dict]:
        """Estrat√©gia EMA Crossover com dados reais"""
        closes = [float(d['close']) for d in data]
        volumes = [float(d['volume']) for d in data]
        
        fast_period = config.get('fast_ema', 12)
        slow_period = config.get('slow_ema', 26)
        use_volume_filter = config.get('volume_filter', True)
        
        fast_ema = self.indicators.ema(closes, fast_period)
        slow_ema = self.indicators.ema(closes, slow_period)
        
        # Filtro de volume (m√©dia m√≥vel de 20 per√≠odos)
        volume_ma = []
        for i in range(len(volumes)):
            if i < 20:
                volume_ma.append(sum(volumes[:i+1]) / (i+1))
            else:
                volume_ma.append(sum(volumes[i-19:i+1]) / 20)
        
        signals = []
        for i, d in enumerate(data):
            signal = 0
            strength = 0.0
            
            if i > 0 and fast_ema[i] > 0 and slow_ema[i] > 0:
                # Filtro de volume
                volume_ok = True
                if use_volume_filter and i > 0:
                    volume_ok = volumes[i] > volume_ma[i] * 1.1
                
                # Long: EMA r√°pida cruza acima da lenta
                if (fast_ema[i] > slow_ema[i] and 
                    fast_ema[i-1] <= slow_ema[i-1] and 
                    volume_ok):
                    signal = 1
                    strength = min(abs(fast_ema[i] - slow_ema[i]) / closes[i], 1.0)
                
                # Short: EMA r√°pida cruza abaixo da lenta
                elif (fast_ema[i] < slow_ema[i] and 
                      fast_ema[i-1] >= slow_ema[i-1] and 
                      volume_ok):
                    signal = -1
                    strength = min(abs(fast_ema[i] - slow_ema[i]) / closes[i], 1.0)
            
            signals.append({
                **d,
                'signal': signal,
                'signal_strength': strength,
                'fast_ema': fast_ema[i],
                'slow_ema': slow_ema[i],
                'volume_ma': volume_ma[i]
            })
        
        return signals
    
    def _rsi_mean_reversion_strategy(self, data: List[Dict], config: Dict) -> List[Dict]:
        """Estrat√©gia RSI Mean Reversion com dados reais"""
        closes = [float(d['close']) for d in data]
        
        rsi_period = config.get('rsi_period', 14)
        oversold = config.get('oversold', 30)
        overbought = config.get('overbought', 70)
        
        rsi_values = self.indicators.rsi(closes, rsi_period)
        
        signals = []
        for i, d in enumerate(data):
            signal = 0
            strength = 0.0
            rsi = rsi_values[i]
            
            # Long: RSI oversold
            if rsi < oversold:
                signal = 1
                strength = (oversold - rsi) / oversold
            
            # Short: RSI overbought
            elif rsi > overbought:
                signal = -1
                strength = (rsi - overbought) / (100 - overbought)
            
            signals.append({
                **d,
                'signal': signal,
                'signal_strength': min(strength, 1.0),
                'rsi': rsi
            })
        
        return signals
    
    def _bollinger_breakout_strategy(self, data: List[Dict], config: Dict) -> List[Dict]:
        """Estrat√©gia Bollinger Breakout com dados reais"""
        closes = [float(d['close']) for d in data]
        volumes = [float(d['volume']) for d in data]
        
        bb_period = config.get('bb_period', 20)
        bb_std = config.get('bb_std', 2.0)
        use_volume_filter = config.get('volume_filter', True)
        
        middle, upper, lower = self.indicators.bollinger_bands(closes, bb_period, bb_std)
        
        # Filtro de volume
        volume_ma = []
        for i in range(len(volumes)):
            if i < 20:
                volume_ma.append(sum(volumes[:i+1]) / (i+1))
            else:
                volume_ma.append(sum(volumes[i-19:i+1]) / 20)
        
        signals = []
        for i, d in enumerate(data):
            signal = 0
            strength = 0.0
            
            if i > 0:
                # Filtro de volume
                volume_ok = True
                if use_volume_filter:
                    volume_ok = volumes[i] > volume_ma[i] * 1.2
                
                # Long: Pre√ßo rompe banda superior
                if (closes[i] > upper[i] and 
                    closes[i-1] <= upper[i-1] and 
                    volume_ok):
                    signal = 1
                    band_width = (upper[i] - lower[i]) / middle[i]
                    strength = min(band_width, 1.0)
                
                # Short: Pre√ßo rompe banda inferior
                elif (closes[i] < lower[i] and 
                      closes[i-1] >= lower[i-1] and 
                      volume_ok):
                    signal = -1
                    band_width = (upper[i] - lower[i]) / middle[i]
                    strength = min(band_width, 1.0)
            
            signals.append({
                **d,
                'signal': signal,
                'signal_strength': strength,
                'bb_upper': upper[i],
                'bb_middle': middle[i],
                'bb_lower': lower[i],
                'volume_ma': volume_ma[i]
            })
        
        return signals

class EnhancedBacktestEngine:
    """Engine de backtesting com gest√£o de capital aprimorada"""
    
    def __init__(self):
        self.api_client = BybitAPIV5RealData()
        self.strategy_engine = RealDataStrategyEngine()
        
        # Testar conex√£o na inicializa√ß√£o
        if not self.api_client.test_connection():
            raise ConnectionError("‚ùå N√£o foi poss√≠vel conectar √† API Bybit")
    
    def run_backtest_with_capital(self, symbol: str, strategy: str, timeframe: str, 
                                 start_date: str, end_date: str, capital_manager: CapitalManager) -> Dict:
        """Executa backtest com gest√£o de capital"""
        try:
            print(f"\nüîÑ Executando {strategy} em {symbol} ({timeframe}) - DADOS REAIS + CAPITAL")
            print("="*70)
            print(f"üí∞ Capital inicial: ${capital_manager.config.initial_capital_usd:,.2f}")
            print(f"üìä Position size: {capital_manager.config.position_size_percent}%")
            print(f"üîÑ Compound interest: {capital_manager.config.compound_interest}")
            print("="*70)
            
            start_time = time.time()
            
            # 1. Obter dados hist√≥ricos reais da API
            print("üìä Fase 1: Obtendo dados hist√≥ricos da API Bybit...")
            data_start = time.time()
            historical_data = self.api_client.get_historical_klines(
                symbol, timeframe, start_date, end_date
            )
            data_time = time.time() - data_start
            print(f"   ‚úÖ Dados obtidos em {data_time:.2f}s")
            
            # 2. Aplicar estrat√©gia
            print("üß† Fase 2: Aplicando estrat√©gia aos dados reais...")
            strategy_start = time.time()
            strategy_func = self.strategy_engine.strategies[strategy]
            config = self.strategy_engine.strategy_configs[strategy]['params']
            signals = strategy_func(historical_data, config)
            strategy_time = time.time() - strategy_start
            print(f"   ‚úÖ Estrat√©gia aplicada em {strategy_time:.2f}s")
            
            # 3. Simular trades com gest√£o de capital
            print("üí∞ Fase 3: Simulando trades com gest√£o de capital...")
            capital_start = time.time()
            
            # Reset do capital manager
            capital_manager.reset_capital()
            
            # Par√¢metros de trading
            stop_loss_pct = 0.015  # 1.5%
            take_profit_pct = 0.03  # 3%
            max_holding_periods = 48  # M√°ximo de per√≠odos em posi√ß√£o
            
            position = None
            valid_signals = [s for s in signals if s['signal'] != 0]
            
            print(f"   üìä Processando {len(valid_signals)} sinais v√°lidos...")
            
            for i, signal in enumerate(signals):
                current_price = float(signal['close'])
                
                # Entrada em nova posi√ß√£o
                if signal['signal'] != 0 and position is None:
                    position = {
                        'direction': signal['signal'],
                        'entry_price': current_price,
                        'entry_time': signal['timestamp'],
                        'entry_index': i,
                        'signal_strength': signal['signal_strength']
                    }
                    
                    # Definir n√≠veis de sa√≠da
                    if signal['signal'] == 1:  # Long
                        position['stop_loss'] = current_price * (1 - stop_loss_pct)
                        position['take_profit'] = current_price * (1 + take_profit_pct)
                    else:  # Short
                        position['stop_loss'] = current_price * (1 + stop_loss_pct)
                        position['take_profit'] = current_price * (1 - take_profit_pct)
                
                # Verificar condi√ß√µes de sa√≠da
                elif position is not None:
                    should_exit = False
                    exit_reason = ""
                    
                    # Stop loss
                    if ((position['direction'] == 1 and current_price <= position['stop_loss']) or
                        (position['direction'] == -1 and current_price >= position['stop_loss'])):
                        should_exit = True
                        exit_reason = "stop_loss"
                    
                    # Take profit
                    elif ((position['direction'] == 1 and current_price >= position['take_profit']) or
                          (position['direction'] == -1 and current_price <= position['take_profit'])):
                        should_exit = True
                        exit_reason = "take_profit"
                    
                    # Sinal contr√°rio
                    elif signal['signal'] == -position['direction']:
                        should_exit = True
                        exit_reason = "signal_reversal"
                    
                    # Tempo m√°ximo em posi√ß√£o
                    elif i - position['entry_index'] >= max_holding_periods:
                        should_exit = True
                        exit_reason = "max_time"
                    
                    # Fechar posi√ß√£o usando CapitalManager
                    if should_exit:
                        trade_result = capital_manager.execute_trade(
                            entry_price=position['entry_price'],
                            exit_price=current_price,
                            direction=position['direction'],
                            timestamp=signal['timestamp'],
                            exit_reason=exit_reason,
                            stop_loss_percent=stop_loss_pct
                        )
                        
                        position = None
            
            capital_time = time.time() - capital_start
            print(f"   ‚úÖ Simula√ß√£o conclu√≠da em {capital_time:.2f}s")
            
            # 4. Obter m√©tricas do CapitalManager
            print("üìä Fase 4: Calculando m√©tricas com gest√£o de capital...")
            metrics = capital_manager.get_metrics()
            
            total_time = time.time() - start_time
            print(f"\n‚úÖ BACKTEST CONCLU√çDO EM {total_time:.2f}s")
            
            return {
                'symbol': symbol,
                'strategy': strategy,
                'timeframe': timeframe,
                'period': f"{start_date}_to_{end_date}",
                'data_source': 'bybit_api_v5_real_with_capital',
                'metrics': metrics,
                'total_signals': len(valid_signals),
                'data_points': len(historical_data),
                'execution_time': {
                    'data_retrieval': data_time,
                    'strategy_application': strategy_time,
                    'capital_simulation': capital_time,
                    'total': total_time
                },
                'capital_config': capital_manager.config.to_dict(),
                'data_quality': {
                    'source': 'Bybit API V5 - Dados Hist√≥ricos Reais',
                    'first_candle': historical_data[0]['timestamp'] if historical_data else None,
                    'last_candle': historical_data[-1]['timestamp'] if historical_data else None,
                    'price_range': f"{min(d['close'] for d in historical_data):.2f} - {max(d['close'] for d in historical_data):.2f}"
                }
            }
            
        except Exception as e:
            logger.error(f"Erro no backtest com capital: {e}")
            return {'error': str(e)}

class BacktestCLIEnhanced:
    """CLI Enhanced para backtesting com gest√£o de capital"""
    
    def __init__(self):
        try:
            self.backtest_engine = EnhancedBacktestEngine()
            self.symbols = ['BTCUSDT', 'ETHUSDT', 'BNBUSDT', 'ADAUSDT', 'XRPUSDT', 'SOLUSDT', 'DOTUSDT', 'AVAXUSDT']
            self.timeframes = ['5m', '15m', '30m', '1h', '4h', '1d']
            
            # Per√≠odos hist√≥ricos reais com contexto de mercado
            self.historical_periods = {
                'Q1_2024': {
                    'start': '2024-01-01', 'end': '2024-03-31', 
                    'name': 'Q1 2024 - Bull Market (BTC: $42k ‚Üí $73k)',
                    'context': 'Forte tend√™ncia de alta, aprova√ß√£o ETF Bitcoin'
                },
                'Q2_2024': {
                    'start': '2024-04-01', 'end': '2024-06-30',
                    'name': 'Q2 2024 - Corre√ß√£o (BTC: $73k ‚Üí $60k)', 
                    'context': 'Corre√ß√£o saud√°vel, consolida√ß√£o'
                },
                'Q3_2024': {
                    'start': '2024-07-01', 'end': '2024-09-30',
                    'name': 'Q3 2024 - Recupera√ß√£o (BTC: $60k ‚Üí $65k)',
                    'context': 'Recupera√ß√£o gradual, mercado lateral'
                },
                'Q4_2024': {
                    'start': '2024-10-01', 'end': '2024-12-31',
                    'name': 'Q4 2024 - Rally Final (BTC: $65k ‚Üí $100k)',
                    'context': 'Rally de fim de ano, m√°ximas hist√≥ricas'
                },
                'RECENT_30D': {
                    'start': (datetime.now() - timedelta(days=30)).strftime('%Y-%m-%d'),
                    'end': datetime.now().strftime('%Y-%m-%d'),
                    'name': '√öltimos 30 dias - Dados Recentes',
                    'context': 'Per√≠odo mais recente dispon√≠vel'
                },
                'RECENT_7D': {
                    'start': (datetime.now() - timedelta(days=7)).strftime('%Y-%m-%d'),
                    'end': datetime.now().strftime('%Y-%m-%d'),
                    'name': '√öltima semana - Dados Muito Recentes',
                    'context': 'An√°lise de curto prazo'
                }
            }
            
            # Tentar carregar configura√ß√£o de capital salva
            self.capital_manager = CapitalManager.load_config()
            if self.capital_manager is None:
                # Criar configura√ß√£o padr√£o
                config = create_default_capital_config(10000.0)
                self.capital_manager = CapitalManager(config)
                print("üí∞ Usando configura√ß√£o padr√£o de capital: $10,000")
            else:
                print(f"üí∞ Configura√ß√£o de capital carregada: ${self.capital_manager.config.initial_capital_usd:,.2f}")
            
        except Exception as e:
            print(f"‚ùå Erro na inicializa√ß√£o: {e}")
            sys.exit(1)
    
    def display_header(self):
        """Exibe cabe√ßalho"""
        print("\n" + "="*80)
        print("üöÄ BACKTEST CLI ENHANCED - DADOS REAIS + GEST√ÉO DE CAPITAL")
        print("="*80)
        print("‚úÖ Conectado √† sua API Bybit configurada")
        print("üìà Dados hist√≥ricos reais obtidos diretamente da exchange")
        print("üí∞ Gest√£o de capital com position sizing din√¢mico")
        print("üîÑ Compound interest e reinvestimento autom√°tico")
        print("üìä M√©tricas precisas em USD e percentuais")
        print("üéØ Estrat√©gias testadas em condi√ß√µes reais de mercado")
        print("="*80)
    
    def display_menu(self):
        """Exibe menu principal"""
        print("\nüìã OP√á√ïES DISPON√çVEIS:")
        print("   1Ô∏è‚É£  Configurar Capital Inicial")
        print("   2Ô∏è‚É£  Backtesting R√°pido com Capital (BTCUSDT, 15m, Q4 2024)")
        print("   3Ô∏è‚É£  Backtesting Personalizado com Capital")
        print("   4Ô∏è‚É£  An√°lise de Per√≠odos Hist√≥ricos")
        print("   5Ô∏è‚É£  Informa√ß√µes das Estrat√©gias")
        print("   6Ô∏è‚É£  Teste de Conex√£o API")
        print("   7Ô∏è‚É£  Ver Configura√ß√£o Atual de Capital")
        print("   0Ô∏è‚É£  Sair")
        print()
    
    def configure_capital(self):
        """Configurar capital inicial e par√¢metros"""
        print("\nüí∞ CONFIGURA√á√ÉO DE CAPITAL INICIAL")
        print("="*50)
        
        # Mostrar configura√ß√£o atual
        current_config = self.capital_manager.config
        print(f"\nüìä CONFIGURA√á√ÉO ATUAL:")
        print(f"   üí∞ Capital inicial: ${current_config.initial_capital_usd:,.2f}")
        print(f"   üìä Position size: {current_config.position_size_percent}%")
        print(f"   üîÑ Compound interest: {'Sim' if current_config.compound_interest else 'N√£o'}")
        print(f"   ‚ö†Ô∏è  Risco por trade: {current_config.risk_per_trade_percent}%")
        print(f"   üìè Posi√ß√£o m√≠nima: ${current_config.min_position_size_usd:.2f}")
        print(f"   üìè Posi√ß√£o m√°xima: ${current_config.max_position_size_usd:,.2f}")
        
        print(f"\nüîß NOVA CONFIGURA√á√ÉO:")
        
        # Capital inicial
        while True:
            try:
                capital_input = input(f"üí∞ Capital inicial em USD (atual: ${current_config.initial_capital_usd:,.2f}): ").strip()
                if not capital_input:
                    initial_capital = current_config.initial_capital_usd
                    break
                
                initial_capital = float(capital_input)
                if initial_capital < 100:
                    print("‚ùå Capital m√≠nimo: $100")
                    continue
                if initial_capital > 1000000:
                    print("‚ùå Capital m√°ximo: $1,000,000")
                    continue
                break
            except ValueError:
                print("‚ùå Digite um valor num√©rico v√°lido")
        
        # Position size
        while True:
            try:
                pos_input = input(f"üìä Position size em % do capital (atual: {current_config.position_size_percent}%): ").strip()
                if not pos_input:
                    position_size_percent = current_config.position_size_percent
                    break
                
                position_size_percent = float(pos_input)
                if position_size_percent < 0.1:
                    print("‚ùå Position size m√≠nimo: 0.1%")
                    continue
                if position_size_percent > 10:
                    print("‚ùå Position size m√°ximo: 10%")
                    continue
                break
            except ValueError:
                print("‚ùå Digite um valor num√©rico v√°lido")
        
        # Compound interest
        compound_input = input(f"üîÑ Usar compound interest? (s/N) (atual: {'s' if current_config.compound_interest else 'n'}): ").strip().lower()
        if compound_input == '':
            compound_interest = current_config.compound_interest
        else:
            compound_interest = compound_input == 's'
        
        # Risco por trade
        while True:
            try:
                risk_input = input(f"‚ö†Ô∏è  Risco m√°ximo por trade em % (atual: {current_config.risk_per_trade_percent}%): ").strip()
                if not risk_input:
                    risk_per_trade = current_config.risk_per_trade_percent
                    break
                
                risk_per_trade = float(risk_input)
                if risk_per_trade < 0.1:
                    print("‚ùå Risco m√≠nimo: 0.1%")
                    continue
                if risk_per_trade > 5:
                    print("‚ùå Risco m√°ximo: 5%")
                    continue
                break
            except ValueError:
                print("‚ùå Digite um valor num√©rico v√°lido")
        
        # Criar nova configura√ß√£o
        new_config = CapitalConfig(
            initial_capital_usd=initial_capital,
            position_size_percent=position_size_percent,
            compound_interest=compound_interest,
            min_position_size_usd=max(10.0, initial_capital * 0.001),  # M√≠nimo 0.1% do capital
            max_position_size_usd=min(initial_capital * 0.1, 10000.0),  # M√°ximo 10% do capital
            risk_per_trade_percent=risk_per_trade
        )
        
        # Mostrar resumo
        print(f"\nüìã RESUMO DA NOVA CONFIGURA√á√ÉO:")
        print(f"   üí∞ Capital inicial: ${new_config.initial_capital_usd:,.2f}")
        print(f"   üìä Position size: {new_config.position_size_percent}%")
        print(f"   üîÑ Compound interest: {'Sim' if new_config.compound_interest else 'N√£o'}")
        print(f"   ‚ö†Ô∏è  Risco por trade: {new_config.risk_per_trade_percent}%")
        print(f"   üìè Posi√ß√£o m√≠nima: ${new_config.min_position_size_usd:.2f}")
        print(f"   üìè Posi√ß√£o m√°xima: ${new_config.max_position_size_usd:,.2f}")
        
        # Exemplo de position sizing
        example_price = 50000  # Exemplo com BTC
        example_position = new_config.initial_capital_usd * (new_config.position_size_percent / 100)
        print(f"\nüí° EXEMPLO (BTC a ${example_price:,}):")
        print(f"   üìä Tamanho da posi√ß√£o: ${example_position:,.2f}")
        print(f"   ü™ô Quantidade: {example_position/example_price:.6f} BTC")
        
        # Confirmar
        confirm = input(f"\n‚úÖ Salvar esta configura√ß√£o? (s/N): ").strip().lower()
        if confirm == 's':
            self.capital_manager = CapitalManager(new_config)
            if self.capital_manager.save_config():
                print(f"‚úÖ Configura√ß√£o salva com sucesso!")
            else:
                print(f"‚ö†Ô∏è  Configura√ß√£o aplicada mas n√£o foi poss√≠vel salvar")
        else:
            print(f"‚ùå Configura√ß√£o cancelada")
    
    def view_capital_config(self):
        """Visualizar configura√ß√£o atual de capital"""
        print("\nüí∞ CONFIGURA√á√ÉO ATUAL DE CAPITAL")
        print("="*50)
        
        config = self.capital_manager.config
        
        print(f"üí∞ Capital inicial: ${config.initial_capital_usd:,.2f}")
        print(f"üìä Position size: {config.position_size_percent}% do capital")
        print(f"üîÑ Compound interest: {'‚úÖ Ativado' if config.compound_interest else '‚ùå Desativado'}")
        print(f"‚ö†Ô∏è  Risco por trade: {config.risk_per_trade_percent}% do capital")
        print(f"üìè Posi√ß√£o m√≠nima: ${config.min_position_size_usd:.2f}")
        print(f"üìè Posi√ß√£o m√°xima: ${config.max_position_size_usd:,.2f}")
        
        # Exemplos de position sizing
        print(f"\nüí° EXEMPLOS DE POSITION SIZING:")
        examples = [
            ("BTCUSDT", 50000),
            ("ETHUSDT", 3000),
            ("BNBUSDT", 300)
        ]
        
        for symbol, price in examples:
            position_size = config.initial_capital_usd * (config.position_size_percent / 100)
            quantity = position_size / price
            
            print(f"   {symbol} (${price:,}): ${position_size:,.2f} = {quantity:.6f} tokens")
        
        # Informa√ß√µes sobre compound interest
        if config.compound_interest:
            print(f"\nüîÑ COMPOUND INTEREST:")
            print(f"   ‚úÖ Lucros s√£o reinvestidos automaticamente")
            print(f"   üìà Capital cresce com trades lucrativos")
            print(f"   üìä Position size aumenta conforme capital cresce")
        else:
            print(f"\nüîÑ CAPITAL FIXO:")
            print(f"   üìä Position size sempre baseado no capital inicial")
            print(f"   üí∞ Lucros/perdas n√£o afetam tamanho das posi√ß√µes")
        
        input(f"\nüì± Pressione Enter para continuar...")
    
    def run_quick_backtest_with_capital(self):
        """Backtesting r√°pido com gest√£o de capital"""
        print("\nüöÄ BACKTESTING R√ÅPIDO COM GEST√ÉO DE CAPITAL")
        print("="*60)
        
        # Configura√ß√£o otimizada
        symbol = 'BTCUSDT'
        timeframe = '15m'
        strategy = 'ema_crossover'
        period = self.historical_periods['Q4_2024']
        
        print(f"üìä Configura√ß√£o:")
        print(f"   ‚Ä¢ S√≠mbolo: {symbol}")
        print(f"   ‚Ä¢ Timeframe: {timeframe}")
        print(f"   ‚Ä¢ Estrat√©gia: {strategy}")
        print(f"   ‚Ä¢ Per√≠odo: {period['name']}")
        print(f"   ‚Ä¢ Contexto: {period['context']}")
        print(f"   ‚Ä¢ Capital inicial: ${self.capital_manager.config.initial_capital_usd:,.2f}")
        print(f"   ‚Ä¢ Position size: {self.capital_manager.config.position_size_percent}%")
        print(f"   ‚Ä¢ Compound interest: {'Sim' if self.capital_manager.config.compound_interest else 'N√£o'}")
        
        confirm = input("\n‚úÖ Executar backtest com gest√£o de capital? (s/N): ").strip().lower()
        if confirm != 's':
            return
        
        print(f"\nüîÑ Executando backtesting com gest√£o de capital...")
        print("="*60)
        
        result = self.backtest_engine.run_backtest_with_capital(
            symbol, strategy, timeframe, period['start'], period['end'], self.capital_manager
        )
        
        if 'error' in result:
            print(f"‚ùå Erro: {result['error']}")
            return
        
        # Exibir resultados detalhados com capital
        self._display_capital_results(result, period['context'])
        
        # Salvar relat√≥rio
        self._save_capital_report(result, 'quick_backtest_with_capital')
    
    def _display_capital_results(self, result: Dict, context: str = ""):
        """Exibe resultados detalhados com informa√ß√µes de capital"""
        metrics = result['metrics']
        
        print(f"\nüìä RESULTADOS DETALHADOS COM GEST√ÉO DE CAPITAL")
        print("="*70)
        
        # Informa√ß√µes b√°sicas
        print(f"üéØ Estrat√©gia: {result['strategy']}")
        print(f"üìä S√≠mbolo: {result['symbol']} ({result['timeframe']})")
        print(f"üìÖ Per√≠odo: {result['period'].replace('_to_', ' a ')}")
        if context:
            print(f"üåç Contexto: {context}")
        
        # CAPITAL E RETORNOS
        print(f"\nüí∞ CAPITAL E RETORNOS:")
        print(f"   üí∞ Capital inicial: ${metrics['initial_capital_usd']:,.2f}")
        print(f"   üí∞ Capital final: ${metrics['final_capital_usd']:,.2f}")
        print(f"   üìà Retorno absoluto: ${metrics['total_return_usd']:,.2f}")
        print(f"   üìä ROI: {metrics['roi_percent']:+.2f}%")
        
        # TRADES
        print(f"\nüìä ESTAT√çSTICAS DE TRADES:")
        print(f"   üéØ Total de trades: {metrics['total_trades']}")
        print(f"   ‚úÖ Trades vencedores: {metrics['winning_trades']} ({metrics['win_rate']:.1%})")
        print(f"   ‚ùå Trades perdedores: {metrics['losing_trades']}")
        print(f"   üìà Profit factor: {metrics['profit_factor']:.2f}")
        
        # P&L EM USD
        print(f"\nüíµ P&L EM USD:")
        print(f"   üíö Lucro bruto: ${metrics['gross_profit_usd']:,.2f}")
        print(f"   üíî Perda bruta: ${metrics['gross_loss_usd']:,.2f}")
        print(f"   üìä Trade m√©dio vencedor: ${metrics['avg_win_usd']:,.2f}")
        print(f"   üìä Trade m√©dio perdedor: ${metrics['avg_loss_usd']:,.2f}")
        print(f"   üèÜ Melhor trade: ${metrics['best_trade_usd']:,.2f}")
        print(f"   üí• Pior trade: ${metrics['worst_trade_usd']:,.2f}")
        
        # POSITION SIZING
        print(f"\nüìè POSITION SIZING:")
        print(f"   üìä Tamanho m√©dio da posi√ß√£o: ${metrics['avg_position_size_usd']:,.2f}")
        print(f"   üìä Position size configurado: {metrics['position_size_percent']}%")
        print(f"   üîÑ Compound interest: {'‚úÖ Ativo' if metrics['compound_interest'] else '‚ùå Inativo'}")
        print(f"   ‚ö†Ô∏è  Risco por trade: {metrics['risk_per_trade_percent']}%")
        
        # DRAWDOWN
        print(f"\nüìâ DRAWDOWN:")
        print(f"   üìâ Drawdown m√°ximo: ${metrics['max_drawdown_usd']:,.2f} ({metrics['max_drawdown_percent']:.1f}%)")
        
        # DIRE√á√ïES
        print(f"\nüîÑ AN√ÅLISE POR DIRE√á√ÉO:")
        print(f"   üìà Trades long: {metrics['long_trades']} (win rate: {metrics['long_win_rate']:.1%})")
        print(f"   üìâ Trades short: {metrics['short_trades']} (win rate: {metrics['short_win_rate']:.1%})")
        
        # PERFORMANCE
        print(f"\n‚ö° PERFORMANCE:")
        print(f"   üìä Dados processados: {result['data_points']} candles")
        print(f"   üéØ Sinais gerados: {result['total_signals']}")
        print(f"   ‚è±Ô∏è  Tempo total: {result['execution_time']['total']:.2f}s")
        
        # EVOLU√á√ÉO DO CAPITAL (√∫ltimos 10 pontos)
        if 'capital_evolution' in metrics and len(metrics['capital_evolution']) > 1:
            print(f"\nüìà EVOLU√á√ÉO DO CAPITAL (√∫ltimos 10 pontos):")
            evolution = metrics['capital_evolution'][-10:]
            for timestamp, capital in evolution:
                date_str = timestamp[:10]  # YYYY-MM-DD
                print(f"   {date_str}: ${capital:,.2f}")
        
        print(f"\n" + "="*70)
        
        # An√°lise de performance
        if metrics['roi_percent'] > 0:
            print(f"üéâ RESULTADO POSITIVO: +{metrics['roi_percent']:.2f}% de retorno!")
        else:
            print(f"‚ö†Ô∏è  RESULTADO NEGATIVO: {metrics['roi_percent']:.2f}% de retorno")
        
        if metrics['win_rate'] > 0.5:
            print(f"‚úÖ Win rate acima de 50%: {metrics['win_rate']:.1%}")
        else:
            print(f"‚ö†Ô∏è  Win rate abaixo de 50%: {metrics['win_rate']:.1%}")
        
        if metrics['profit_factor'] > 1.0:
            print(f"‚úÖ Profit factor positivo: {metrics['profit_factor']:.2f}")
        else:
            print(f"‚ùå Profit factor negativo: {metrics['profit_factor']:.2f}")
    
    def _save_capital_report(self, result: Dict, filename_prefix: str):
        """Salva relat√≥rio detalhado com informa√ß√µes de capital"""
        try:
            timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
            filename = f"{filename_prefix}_{result['symbol']}_{result['strategy']}_{timestamp}.json"
            
            os.makedirs('reports', exist_ok=True)
            filepath = f"reports/{filename}"
            
            with open(filepath, 'w') as f:
                json.dump(result, f, indent=2, default=str)
            
            print(f"\nüíæ Relat√≥rio salvo: {filepath}")
            
        except Exception as e:
            print(f"‚ö†Ô∏è  Erro ao salvar relat√≥rio: {e}")
    
    def run(self):
        """Executa o CLI principal"""
        self.display_header()
        
        while True:
            self.display_menu()
            
            try:
                choice = input("üî¢ Escolha uma op√ß√£o: ").strip()
                
                if choice == '0':
                    print("\nüëã Obrigado por usar o Backtest CLI Enhanced!")
                    break
                
                elif choice == '1':
                    self.configure_capital()
                
                elif choice == '2':
                    self.run_quick_backtest_with_capital()
                
                elif choice == '3':
                    print("\nüöß Backtesting personalizado em desenvolvimento...")
                    print("Use a op√ß√£o 2 para teste r√°pido com capital.")
                
                elif choice == '4':
                    print("\nüöß An√°lise de per√≠odos hist√≥ricos em desenvolvimento...")
                
                elif choice == '5':
                    self._display_strategy_info()
                
                elif choice == '6':
                    self.backtest_engine.api_client.test_connection()
                
                elif choice == '7':
                    self.view_capital_config()
                
                else:
                    print("‚ùå Op√ß√£o inv√°lida. Tente novamente.")
                
            except KeyboardInterrupt:
                print("\n\nüëã Saindo...")
                break
            except Exception as e:
                print(f"‚ùå Erro: {e}")
    
    def _display_strategy_info(self):
        """Exibe informa√ß√µes das estrat√©gias"""
        print("\nüß† INFORMA√á√ïES DAS ESTRAT√âGIAS")
        print("="*50)
        
        for strategy_key, config in self.backtest_engine.strategy_engine.strategy_configs.items():
            print(f"\nüìä {config['name']}")
            print(f"   üìù {config['description']}")
            print(f"   ‚ö†Ô∏è N√≠vel de risco: {config['risk_level']}")
            print(f"   üìä Melhores timeframes: {', '.join(config['best_timeframes'])}")
            print(f"   üéØ Condi√ß√µes ideais: {config['market_conditions']}")
            print(f"   ‚öôÔ∏è Par√¢metros: {config['params']}")
        
        input(f"\nüì± Pressione Enter para continuar...")

if __name__ == "__main__":
    try:
        cli = BacktestCLIEnhanced()
        cli.run()
    except KeyboardInterrupt:
        print("\n\nüëã Programa interrompido pelo usu√°rio")
    except Exception as e:
        print(f"‚ùå Erro fatal: {e}")
        sys.exit(1)

