"""
Real-time Confluence Execution
Rate-limited (1 decis√£o por candle fechado), reenvio s√≥ em mudan√ßa de estado
"""

import pandas as pd
import time
from datetime import datetime
from typing import Optional, Callable
import yaml
from market_manus.strategies.smc.patterns import confluence_decision
from market_manus.core.signal import Signal


class RealTimeConfluenceEngine:
    """
    Motor de conflu√™ncia em tempo real com rate-limiting.
    Executa 1 decis√£o por candle fechado e s√≥ reenvia ordem em mudan√ßa de estado.
    """
    
    def __init__(self, config_path: str = None, config: dict = None):
        """
        Args:
            config_path: Caminho para YAML de config
            config: Dict de config direto (priorit√°rio)
        """
        if config is None:
            if config_path is None:
                config_path = "config/confluence.yaml"
            
            with open(config_path, 'r') as f:
                self.config = yaml.safe_load(f)
        else:
            self.config = config
        
        self.last_processed_timestamp = None  # Timestamp do √∫ltimo candle processado
        self.last_signal = None
        self.running = False
        self.stats = {
            'signals_generated': 0,
            'buy_signals': 0,
            'sell_signals': 0,
            'hold_signals': 0,
            'state_changes': 0
        }
    
    def _is_new_candle(self, candle_timestamp) -> bool:
        """
        Verifica se √© um novo candle baseado no timestamp do √∫ltimo candle do stream.
        Data-driven gating em vez de wall-clock.
        
        Args:
            candle_timestamp: Timestamp do √∫ltimo candle do stream
        
        Returns:
            True se √© novo candle (timestamp diferente do √∫ltimo processado)
        """
        if self.last_processed_timestamp is None:
            return True
        
        # Compara timestamps: s√≥ processa se mudou
        return candle_timestamp != self.last_processed_timestamp
    
    def process_candle(
        self,
        candles: pd.DataFrame,
        symbol: str,
        timeframe: str,
        callback: Optional[Callable] = None
    ) -> Optional[Signal]:
        """
        Processa novo candle e gera decis√£o de conflu√™ncia.
        Rate-limited: s√≥ executa se √© novo candle.
        S√≥ notifica se houver mudan√ßa de estado.
        
        Args:
            candles: DataFrame OHLCV hist√≥rico + candle atual
            symbol: S√≠mbolo (ex: "BTCUSDT")
            timeframe: Timeframe (ex: "5m")
            callback: Fun√ß√£o callback(signal) para executar ordem (opcional)
        
        Returns:
            Signal se houver mudan√ßa de estado, None caso contr√°rio
        """
        # Extrai timestamp do √∫ltimo candle do stream
        if 'timestamp' in candles.columns:
            candle_timestamp = candles['timestamp'].iloc[-1]
        elif isinstance(candles.index[-1], (pd.Timestamp, datetime)):
            candle_timestamp = candles.index[-1]
        else:
            candle_timestamp = len(candles)  # Fallback: usa √≠ndice
        
        # Rate limiting: s√≥ processa se √© novo candle (data-driven)
        if not self._is_new_candle(candle_timestamp):
            return None
        
        # Atualiza timestamp do √∫ltimo candle processado
        self.last_processed_timestamp = candle_timestamp
        
        # Gera decis√£o de conflu√™ncia
        signal = confluence_decision(
            candles=candles,
            symbol=symbol,
            timeframe=timeframe,
            config=self.config
        )
        
        self.stats['signals_generated'] += 1
        
        if signal.action == "BUY":
            self.stats['buy_signals'] += 1
        elif signal.action == "SELL":
            self.stats['sell_signals'] += 1
        else:
            self.stats['hold_signals'] += 1
        
        # Verifica mudan√ßa de estado
        state_changed = False
        
        if self.last_signal is None:
            # Primeiro sinal: conta como mudan√ßa se n√£o for HOLD
            if signal.action != "HOLD":
                state_changed = True
                self.stats['state_changes'] += 1
        else:
            # Compara com sinal anterior
            if signal.action != self.last_signal.action:
                state_changed = True
                self.stats['state_changes'] += 1
        
        # S√≥ executa callback se houver mudan√ßa de estado
        if state_changed and callback is not None:
            callback(signal)
        
        # Atualiza √∫ltimo sinal
        self.last_signal = signal
        
        return signal if state_changed else None
    
    def get_stats(self) -> dict:
        """Retorna estat√≠sticas da sess√£o"""
        return self.stats.copy()
    
    def reset(self):
        """Reseta estado do engine"""
        self.last_processed_timestamp = None
        self.last_signal = None
        self.stats = {
            'signals_generated': 0,
            'buy_signals': 0,
            'sell_signals': 0,
            'hold_signals': 0,
            'state_changes': 0
        }


def realtime_confluence(
    data_stream: Callable,
    config_path: str = None,
    config: dict = None,
    broker_callback: Optional[Callable] = None,
    symbol: str = "BTCUSDT",
    timeframe: str = "5m",
    max_iterations: Optional[int] = None
) -> dict:
    """
    Executa conflu√™ncia em tempo real com rate-limiting.
    
    Args:
        data_stream: Callable que retorna DataFrame OHLCV atualizado a cada chamada
        config_path: Caminho para YAML de config
        config: Dict de config direto
        broker_callback: Fun√ß√£o(signal) para executar ordens (opcional)
        symbol: S√≠mbolo para trading
        timeframe: Timeframe
        max_iterations: M√°ximo de itera√ß√µes (None = infinito)
    
    Returns:
        Dict com estat√≠sticas da sess√£o
    """
    engine = RealTimeConfluenceEngine(config_path, config)
    
    iteration = 0
    
    try:
        while True:
            # Obt√©m dados atualizados
            candles = data_stream()
            
            if candles is None or len(candles) == 0:
                time.sleep(1)
                continue
            
            # Processa candle
            signal = engine.process_candle(
                candles=candles,
                symbol=symbol,
                timeframe=timeframe,
                callback=broker_callback
            )
            
            # Log se houver mudan√ßa
            if signal is not None:
                print(f"[{datetime.now().strftime('%Y-%m-%d %H:%M:%S')}] "
                      f"üîî MUDAN√áA DE ESTADO: {signal.action} "
                      f"(confidence: {signal.confidence:.2f})")
                print(f"   Raz√µes: {signal.reasons[:3]}")  # Primeiras 3 raz√µes
            
            iteration += 1
            
            # Verifica limite de itera√ß√µes
            if max_iterations is not None and iteration >= max_iterations:
                break
            
            # Aguarda pr√≥ximo tick (ajust√°vel)
            time.sleep(1)
    
    except KeyboardInterrupt:
        print("\n‚èπÔ∏è  Real-time confluence interrompido pelo usu√°rio")
    
    return engine.get_stats()
