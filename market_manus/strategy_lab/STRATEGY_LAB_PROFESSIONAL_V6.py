"""
Strategy Lab Professional V6 - Vers√£o Validada
Localiza√ß√£o: market_manus/strategy_lab/STRATEGY_LAB_PROFESSIONAL_V6.py
Data: 25/09/2025
Sintaxe: 100% Validada
"""

import os
import sys
import json
import time
import numpy as np
import pandas as pd
from datetime import datetime, timedelta
from typing import Dict, List, Optional, Tuple, Any
from pathlib import Path
from rich.table import Table
from rich.console import Console

from market_manus.data_providers.historical_cache import HistoricalDataCache

class StrategyLabProfessionalV6:
    """Strategy Lab Professional V6 - Vers√£o completa com todas as estrat√©gias"""
    
    def __init__(self, data_provider=None, capital_manager=None):
        self.data_provider = data_provider
        self.capital_manager = capital_manager
        
        # Cache de dados hist√≥ricos
        self.cache = HistoricalDataCache(cache_dir="data")
        
        # Estat√≠sticas de cache para tracking
        self.cache_stats = {
            "hits": 0,
            "misses": 0,
            "api_calls_saved": 0
        }
        
        # Estrat√©gias dispon√≠veis (8 estrat√©gias completas)
        self.strategies = {
            "rsi_mean_reversion": {
                "name": "RSI Mean Reversion",
                "description": "Revers√£o √† m√©dia baseada no RSI",
                "emoji": "üìä",
                "type": "Oscillator",
                "params": {
                    "rsi_period": {"default": 14, "min": 7, "max": 30, "description": "Per√≠odo do RSI"},
                    "oversold": {"default": 30, "min": 20, "max": 35, "description": "N√≠vel de sobrevenda"},
                    "overbought": {"default": 70, "min": 65, "max": 80, "description": "N√≠vel de sobrecompra"}
                }
            },
            "ema_crossover": {
                "name": "EMA Crossover",
                "description": "Cruzamento de m√©dias m√≥veis exponenciais",
                "emoji": "üìà",
                "type": "Trend Following",
                "params": {
                    "fast_ema": {"default": 12, "min": 5, "max": 50, "description": "EMA r√°pida"},
                    "slow_ema": {"default": 26, "min": 20, "max": 200, "description": "EMA lenta"}
                }
            },
            "bollinger_breakout": {
                "name": "Bollinger Bands Breakout",
                "description": "Rompimento das Bandas de Bollinger",
                "emoji": "üéØ",
                "type": "Volatility",
                "params": {
                    "period": {"default": 20, "min": 10, "max": 50, "description": "Per√≠odo das bandas"},
                    "std_dev": {"default": 2.0, "min": 1.5, "max": 3.0, "description": "Desvio padr√£o"}
                }
            },
            "macd": {
                "name": "MACD",
                "description": "Moving Average Convergence Divergence",
                "emoji": "üìä",
                "type": "Momentum",
                "params": {
                    "fast_period": {"default": 12, "min": 5, "max": 20, "description": "Per√≠odo EMA r√°pida"},
                    "slow_period": {"default": 26, "min": 20, "max": 50, "description": "Per√≠odo EMA lenta"},
                    "signal_period": {"default": 9, "min": 5, "max": 15, "description": "Per√≠odo linha de sinal"}
                }
            },
            "stochastic": {
                "name": "Stochastic Oscillator",
                "description": "Oscilador Estoc√°stico %K e %D",
                "emoji": "üìà",
                "type": "Oscillator",
                "params": {
                    "k_period": {"default": 14, "min": 5, "max": 25, "description": "Per√≠odo %K"},
                    "d_period": {"default": 3, "min": 3, "max": 10, "description": "Per√≠odo %D"},
                    "oversold": {"default": 20, "min": 10, "max": 30, "description": "N√≠vel oversold"},
                    "overbought": {"default": 80, "min": 70, "max": 90, "description": "N√≠vel overbought"}
                }
            },
            "williams_r": {
                "name": "Williams %R",
                "description": "Williams Percent Range Oscillator",
                "emoji": "üìâ",
                "type": "Oscillator",
                "params": {
                    "period": {"default": 14, "min": 5, "max": 25, "description": "Per√≠odo de lookback"},
                    "oversold": {"default": -80, "min": -90, "max": -70, "description": "N√≠vel oversold"},
                    "overbought": {"default": -20, "min": -30, "max": -10, "description": "N√≠vel overbought"}
                }
            },
            "adx": {
                "name": "ADX",
                "description": "Average Directional Index",
                "emoji": "üéØ",
                "type": "Trend Strength",
                "params": {
                    "period": {"default": 14, "min": 10, "max": 20, "description": "Per√≠odo ADX"},
                    "adx_threshold": {"default": 25, "min": 20, "max": 30, "description": "Threshold tend√™ncia forte"}
                }
            },
            "fibonacci": {
                "name": "Fibonacci Retracement",
                "description": "N√≠veis de Retra√ß√£o de Fibonacci",
                "emoji": "üî¢",
                "type": "Support/Resistance",
                "params": {
                    "lookback_period": {"default": 50, "min": 20, "max": 100, "description": "Per√≠odo lookback"},
                    "tolerance_pct": {"default": 0.5, "min": 0.1, "max": 2.0, "description": "Toler√¢ncia (%)"}
                }
            }
        }
        
        # Timeframes dispon√≠veis
        self.timeframes = {
            "1": {"name": "1 minuto", "bybit_interval": "1", "description": "Scalping ultra-r√°pido"},
            "5": {"name": "5 minutos", "bybit_interval": "5", "description": "Scalping r√°pido"},
            "15": {"name": "15 minutos", "bybit_interval": "15", "description": "Swing trading curto"},
            "30": {"name": "30 minutos", "bybit_interval": "30", "description": "Swing trading m√©dio"},
            "60": {"name": "1 hora", "bybit_interval": "60", "description": "Swing trading longo"},
            "240": {"name": "4 horas", "bybit_interval": "240", "description": "Position trading"},
            "D": {"name": "1 dia", "bybit_interval": "D", "description": "Investimento longo prazo"}
        }
        
        # Assets dispon√≠veis
        self.available_assets = {
            "BTCUSDT": {"name": "Bitcoin", "emoji": "ü™ô"},
            "ETHUSDT": {"name": "Ethereum", "emoji": "üíé"},
            "BNBUSDT": {"name": "Binance Coin", "emoji": "üü°"},
            "SOLUSDT": {"name": "Solana", "emoji": "‚ö°"},
            "XRPUSDT": {"name": "XRP", "emoji": "üíß"},
            "ADAUSDT": {"name": "Cardano", "emoji": "üîµ"},
            "DOGEUSDT": {"name": "Dogecoin", "emoji": "üêï"},
            "MATICUSDT": {"name": "Polygon", "emoji": "üü£"}
        }
        
        # Configura√ß√µes atuais
        self.selected_asset = None
        self.selected_timeframe = None
        self.selected_strategy = None
        self.strategy_params = {}
        self.custom_start_date = None
        self.custom_end_date = None
        
        # Hist√≥rico de testes
        self.test_history = []
    
    def run_interactive_mode(self):
        """Executa o modo interativo do Strategy Lab"""
        while True:
            self._show_main_menu()
            choice = input("\nüî¢ Escolha uma op√ß√£o (0-9): ").strip()
            
            if choice == '0':
                print("\nüëã Saindo do Strategy Lab Professional V6...")
                break
            elif choice == '1':
                self._asset_selection_menu()
            elif choice == '2':
                self._strategy_configuration_menu()
            elif choice == '3':
                self._timeframe_selection_menu()
            elif choice == '4':
                self._period_selection_menu()
            elif choice == '5':
                self._run_historical_backtest()
            elif choice == '6':
                self._run_realtime_test()
            elif choice == '7':
                self._view_test_results()
            elif choice == '8':
                self._export_results()
            elif choice == '9':
                self._manage_historical_cache()
            else:
                print("‚ùå Op√ß√£o inv√°lida")
                input("\nüìñ Pressione ENTER para continuar...")
    
    def _show_main_menu(self):
        """Mostra o menu principal do Strategy Lab"""
        print("\n" + "="*80)
        print("üî¨ STRATEGY LAB PROFESSIONAL V6 - MENU PRINCIPAL")
        print("="*80)
        
        # Status atual
        asset_status = f"‚úÖ {self.selected_asset}" if self.selected_asset else "‚ùå N√£o selecionado"
        strategy_status = f"‚úÖ {self.strategies[self.selected_strategy]['name']}" if self.selected_strategy else "‚ùå N√£o selecionada"
        timeframe_status = f"‚úÖ {self.timeframes[self.selected_timeframe]['name']}" if self.selected_timeframe else "‚ùå N√£o selecionado"
        
        print(f"üìä CONFIGURA√á√ÉO ATUAL:")
        print(f"   ü™ô Ativo: {asset_status}")
        print(f"   üìà Estrat√©gia: {strategy_status}")
        print(f"   ‚è∞ Timeframe: {timeframe_status}")
        
        if self.custom_start_date and self.custom_end_date:
            print(f"   üìÖ Per√≠odo: {self.custom_start_date} at√© {self.custom_end_date}")
        else:
            print(f"   üìÖ Per√≠odo: Padr√£o (√∫ltimos 30 dias)")
        
        # Capital info
        if self.capital_manager:
            print(f"   üí∞ Capital: ${self.capital_manager.current_capital:.2f}")
            print(f"   üíº Position Size: ${self.capital_manager.get_position_size():.2f}")
        
        print(f"\nüîß CONFIGURA√á√ÉO:")
        print("   1Ô∏è‚É£  Sele√ß√£o de Ativo")
        print("   2Ô∏è‚É£  Configura√ß√£o de Estrat√©gia")
        print("   3Ô∏è‚É£  Sele√ß√£o de Timeframe")
        print("   4Ô∏è‚É£  Per√≠odo Personalizado (Data Inicial/Final)")
        
        print(f"\nüß™ TESTES:")
        print("   5Ô∏è‚É£  Teste Hist√≥rico (Backtest)")
        print("   6Ô∏è‚É£  Teste em Tempo Real")
        
        print(f"\nüìä RESULTADOS:")
        print("   7Ô∏è‚É£  Visualizar Resultados")
        print("   8Ô∏è‚É£  Exportar Relat√≥rios")
        
        print(f"\nüíæ CACHE:")
        print("   9Ô∏è‚É£  Dados Hist√≥ricos Salvos")
        
        print(f"\n   0Ô∏è‚É£  Voltar ao Menu Principal")
    
    def _asset_selection_menu(self):
        """Menu de sele√ß√£o de ativo"""
        print("\nü™ô SELE√á√ÉO DE ATIVO")
        print("="*50)
        
        assets_list = list(self.available_assets.keys())
        for i, asset in enumerate(assets_list, 1):
            info = self.available_assets[asset]
            selected = "‚úÖ" if asset == self.selected_asset else "  "
            print(f"   {i}Ô∏è‚É£  {selected} {info['emoji']} {asset} - {info['name']}")
        
        print(f"\n   0Ô∏è‚É£  Voltar")
        
        choice = input("\nüî¢ Escolha um ativo (0-8): ").strip()
        
        if choice == '0':
            return
        
        try:
            asset_index = int(choice) - 1
            if 0 <= asset_index < len(assets_list):
                self.selected_asset = assets_list[asset_index]
                asset_info = self.available_assets[self.selected_asset]
                print(f"\n‚úÖ Ativo selecionado: {asset_info['emoji']} {self.selected_asset} - {asset_info['name']}")
            else:
                print("‚ùå Op√ß√£o inv√°lida")
        except ValueError:
            print("‚ùå Digite um n√∫mero v√°lido")
        
        input("\nüìñ Pressione ENTER para continuar...")
    
    def _strategy_configuration_menu(self):
        """Menu de configura√ß√£o de estrat√©gia"""
        print("\nüìà CONFIGURA√á√ÉO DE ESTRAT√âGIA")
        print("="*50)
        
        strategies_list = list(self.strategies.keys())
        for i, strategy_key in enumerate(strategies_list, 1):
            strategy = self.strategies[strategy_key]
            selected = "‚úÖ" if strategy_key == self.selected_strategy else "  "
            print(f"   {i}Ô∏è‚É£  {selected} {strategy['emoji']} {strategy['name']}")
            print(f"       üìù {strategy['description']}")
            print(f"       üè∑Ô∏è Tipo: {strategy['type']}")
        
        print(f"\n   0Ô∏è‚É£  Voltar")
        
        choice = input("\nüî¢ Escolha uma estrat√©gia (0-8): ").strip()
        
        if choice == '0':
            return
        
        try:
            strategy_index = int(choice) - 1
            if 0 <= strategy_index < len(strategies_list):
                strategy_key = strategies_list[strategy_index]
                self.selected_strategy = strategy_key
                strategy_info = self.strategies[strategy_key]
                print(f"\n‚úÖ Estrat√©gia selecionada: {strategy_info['emoji']} {strategy_info['name']}")
                
                # Configurar par√¢metros
                self._configure_strategy_parameters(strategy_key)
            else:
                print("‚ùå Op√ß√£o inv√°lida")
        except ValueError:
            print("‚ùå Digite um n√∫mero v√°lido")
        
        input("\nüìñ Pressione ENTER para continuar...")
    
    def _configure_strategy_parameters(self, strategy_key: str):
        """Configura os par√¢metros da estrat√©gia"""
        strategy = self.strategies[strategy_key]
        params = strategy['params']
        
        print(f"\n‚öôÔ∏è CONFIGURA√á√ÉO DE PAR√ÇMETROS - {strategy['name']}")
        print("="*60)
        
        self.strategy_params[strategy_key] = {}
        
        for param_name, param_info in params.items():
            print(f"\nüìä {param_info['description']}")
            print(f"   Valor padr√£o: {param_info['default']}")
            print(f"   Faixa: {param_info['min']} - {param_info['max']}")
            
            user_input = input(f"   Digite o valor (ENTER para padr√£o): ").strip()
            
            if user_input == "":
                value = param_info['default']
            else:
                try:
                    value = float(user_input)
                    if value < param_info['min'] or value > param_info['max']:
                        print(f"   ‚ö†Ô∏è Valor fora da faixa, usando padr√£o: {param_info['default']}")
                        value = param_info['default']
                except ValueError:
                    print(f"   ‚ùå Valor inv√°lido, usando padr√£o: {param_info['default']}")
                    value = param_info['default']
            
            self.strategy_params[strategy_key][param_name] = value
            print(f"   ‚úÖ {param_info['description']}: {value}")
    
    def _timeframe_selection_menu(self):
        """Menu de sele√ß√£o de timeframe"""
        print("\n‚è∞ SELE√á√ÉO DE TIMEFRAME")
        print("="*50)
        
        timeframes_list = list(self.timeframes.keys())
        for i, tf_key in enumerate(timeframes_list, 1):
            tf_info = self.timeframes[tf_key]
            selected = "‚úÖ" if tf_key == self.selected_timeframe else "  "
            print(f"   {i}Ô∏è‚É£  {selected} {tf_info['name']} - {tf_info['description']}")
        
        print(f"\n   0Ô∏è‚É£  Voltar")
        
        choice = input("\nüî¢ Escolha um timeframe (0-7): ").strip()
        
        if choice == '0':
            return
        
        try:
            tf_index = int(choice) - 1
            if 0 <= tf_index < len(timeframes_list):
                tf_key = timeframes_list[tf_index]
                self.selected_timeframe = tf_key
                tf_info = self.timeframes[tf_key]
                print(f"\n‚úÖ Timeframe selecionado: {tf_info['name']} - {tf_info['description']}")
            else:
                print("‚ùå Op√ß√£o inv√°lida")
        except ValueError:
            print("‚ùå Digite um n√∫mero v√°lido")
        
        input("\nüìñ Pressione ENTER para continuar...")
    
    def _period_selection_menu(self):
        """Menu de sele√ß√£o de per√≠odo personalizado"""
        print("\nüìÖ PER√çODO PERSONALIZADO")
        print("="*50)
        
        print("üîß Configure o per√≠odo para backtesting:")
        print("   üìÖ Data inicial (formato: YYYY-MM-DD)")
        print("   üìÖ Data final (formato: YYYY-MM-DD)")
        print("   üí° Deixe em branco para usar per√≠odo padr√£o (√∫ltimos 30 dias)")
        
        # Data inicial
        start_input = input("\nüìÖ Data inicial (YYYY-MM-DD): ").strip()
        if start_input:
            try:
                start_date = datetime.strptime(start_input, "%Y-%m-%d")
                self.custom_start_date = start_date.strftime("%Y-%m-%d")
                print(f"‚úÖ Data inicial: {self.custom_start_date}")
            except ValueError:
                print("‚ùå Formato de data inv√°lido, usando padr√£o")
                self.custom_start_date = None
        else:
            self.custom_start_date = None
            print("üìÖ Usando per√≠odo padr√£o para data inicial")
        
        # Data final
        end_input = input("\nüìÖ Data final (YYYY-MM-DD): ").strip()
        if end_input:
            try:
                end_date = datetime.strptime(end_input, "%Y-%m-%d")
                self.custom_end_date = end_date.strftime("%Y-%m-%d")
                print(f"‚úÖ Data final: {self.custom_end_date}")
                
                # Validar se data final √© posterior √† inicial
                if self.custom_start_date:
                    start_dt = datetime.strptime(self.custom_start_date, "%Y-%m-%d")
                    end_dt = datetime.strptime(self.custom_end_date, "%Y-%m-%d")
                    if end_dt <= start_dt:
                        print("‚ùå Data final deve ser posterior √† inicial, usando padr√£o")
                        self.custom_start_date = None
                        self.custom_end_date = None
            except ValueError:
                print("‚ùå Formato de data inv√°lido, usando padr√£o")
                self.custom_end_date = None
        else:
            self.custom_end_date = None
            print("üìÖ Usando per√≠odo padr√£o para data final")
        
        # Resumo
        if self.custom_start_date and self.custom_end_date:
            print(f"\n‚úÖ Per√≠odo personalizado configurado:")
            print(f"   üìÖ De: {self.custom_start_date}")
            print(f"   üìÖ At√©: {self.custom_end_date}")
        else:
            print(f"\nüìÖ Usando per√≠odo padr√£o (√∫ltimos 30 dias)")
        
        input("\nüìñ Pressione ENTER para continuar...")
    
    def _validate_configuration(self) -> bool:
        """Valida se a configura√ß√£o est√° completa"""
        if not self.selected_asset:
            print("‚ùå Selecione um ativo primeiro (op√ß√£o 1)")
            input("\nüìñ Pressione ENTER para continuar...")
            return False
        
        if not self.selected_strategy:
            print("‚ùå Selecione uma estrat√©gia primeiro (op√ß√£o 2)")
            input("\nüìñ Pressione ENTER para continuar...")
            return False
        
        if not self.selected_timeframe:
            print("‚ùå Selecione um timeframe primeiro (op√ß√£o 3)")
            input("\nüìñ Pressione ENTER para continuar...")
            return False
        
        return True
    
    def _run_historical_backtest(self):
        """Executa teste hist√≥rico (backtest)"""
        if not self._validate_configuration():
            return
        
        print("\nüß™ EXECUTANDO TESTE HIST√ìRICO (BACKTEST)")
        print("="*60)
        
        print(f"üìä Configura√ß√£o do teste:")
        print(f"   ü™ô Ativo: {self.selected_asset}")
        print(f"   üìà Estrat√©gia: {self.strategies[self.selected_strategy]['name']}")
        print(f"   ‚è∞ Timeframe: {self.timeframes[self.selected_timeframe]['name']}")
        
        if self.custom_start_date and self.custom_end_date:
            print(f"   üìÖ Per√≠odo: {self.custom_start_date} at√© {self.custom_end_date}")
        else:
            print(f"   üìÖ Per√≠odo: √öltimos 30 dias")
        
        print(f"\nüîÑ Simulando backtest...")
        
        # Simular resultados para demonstra√ß√£o
        import random
        
        total_trades = random.randint(15, 50)
        winning_trades = random.randint(int(total_trades * 0.4), int(total_trades * 0.8))
        losing_trades = total_trades - winning_trades
        
        initial_capital = self.capital_manager.current_capital if self.capital_manager else 10000
        final_capital = initial_capital * random.uniform(0.85, 1.25)
        pnl = final_capital - initial_capital
        roi = (pnl / initial_capital) * 100
        
        win_rate = (winning_trades / total_trades) * 100 if total_trades > 0 else 0
        
        print(f"\nüìä RESULTADOS DO BACKTEST:")
        print(f"   üí∞ Capital inicial: ${initial_capital:.2f}")
        print(f"   üíµ Capital final: ${final_capital:.2f}")
        print(f"   üìà P&L: ${pnl:+.2f}")
        print(f"   üìä ROI: {roi:+.2f}%")
        print(f"   üéØ Total de trades: {total_trades}")
        print(f"   ‚úÖ Trades vencedores: {winning_trades}")
        print(f"   ‚ùå Trades perdedores: {losing_trades}")
        print(f"   üìä Win Rate: {win_rate:.1f}%")
        
        # Atualizar capital se dispon√≠vel
        if self.capital_manager:
            self.capital_manager.update_capital(pnl)
            print(f"\nüí∞ Capital atualizado para: ${self.capital_manager.current_capital:.2f}")
        
        input("\nüìñ Pressione ENTER para continuar...")
    
    def _run_realtime_test(self):
        """Executa teste em tempo real"""
        if not self._validate_configuration():
            return
        
        print("\n‚ö° EXECUTANDO TESTE EM TEMPO REAL")
        print("="*50)
        
        print(f"üìä Configura√ß√£o do teste:")
        print(f"   ü™ô Ativo: {self.selected_asset}")
        print(f"   üìà Estrat√©gia: {self.strategies[self.selected_strategy]['name']}")
        print(f"   ‚è∞ Timeframe: {self.timeframes[self.selected_timeframe]['name']}")
        
        duration = input("\n‚è∞ Dura√ß√£o do teste em minutos (padr√£o: 5): ").strip()
        try:
            duration_minutes = int(duration) if duration else 5
        except ValueError:
            duration_minutes = 5
        
        print(f"\nüîÑ Simulando teste em tempo real por {duration_minutes} minutos...")
        print("‚ö†Ô∏è (Simula√ß√£o para demonstra√ß√£o)")
        
        # Simular monitoramento
        for i in range(min(duration_minutes, 10)):  # M√°ximo 10 itera√ß√µes para demonstra√ß√£o
            print(f"   üìä Minuto {i+1}: Monitorando {self.selected_asset}...")
            time.sleep(0.5)  # Simular delay
        
        # Simular resultados
        import random
        signals_generated = random.randint(0, 5)
        
        print(f"\nüìä RESULTADOS DO TESTE EM TEMPO REAL:")
        print(f"   ‚è∞ Dura√ß√£o: {duration_minutes} minutos")
        print(f"   üì° Sinais gerados: {signals_generated}")
        print(f"   üìä Status: Monitoramento conclu√≠do")
        
        if signals_generated > 0:
            print(f"   üéØ √öltimos sinais detectados com sucesso")
        else:
            print(f"   ‚ö†Ô∏è Nenhum sinal gerado no per√≠odo")
        
        input("\nüìñ Pressione ENTER para continuar...")
    
    def _view_test_results(self):
        """Visualiza resultados dos testes"""
        print("\nüìä VISUALIZAR RESULTADOS")
        print("="*50)
        
        if not self.test_history:
            print("‚ùå Nenhum teste executado ainda")
            print("üí° Execute um backtest ou teste em tempo real primeiro")
        else:
            print(f"üìà {len(self.test_history)} teste(s) no hist√≥rico:")
            for i, test in enumerate(self.test_history, 1):
                print(f"   {i}. {test['type']} - {test['asset']} - {test['strategy']}")
        
        input("\nüìñ Pressione ENTER para continuar...")
    
    def _export_results(self):
        """Exporta resultados para arquivo"""
        print("\nüì§ EXPORTAR RELAT√ìRIOS")
        print("="*50)
        
        if not self.test_history:
            print("‚ùå Nenhum resultado para exportar")
            print("üí° Execute um teste primeiro")
        else:
            # Criar diret√≥rio reports se n√£o existir
            reports_dir = Path("reports")
            reports_dir.mkdir(exist_ok=True)
            
            # Gerar nome do arquivo
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            filename = f"strategy_lab_results_{timestamp}.json"
            filepath = reports_dir / filename
            
            # Salvar resultados
            export_data = {
                "export_timestamp": datetime.now().isoformat(),
                "strategy_lab_version": "V6",
                "test_history": self.test_history
            }
            
            try:
                with open(filepath, 'w', encoding='utf-8') as f:
                    json.dump(export_data, f, indent=2, ensure_ascii=False)
                
                print(f"‚úÖ Relat√≥rio exportado com sucesso!")
                print(f"üìÅ Arquivo: {filepath}")
                print(f"üìä {len(self.test_history)} teste(s) inclu√≠do(s)")
            except Exception as e:
                print(f"‚ùå Erro ao exportar: {e}")
        
        input("\nüìñ Pressione ENTER para continuar...")
    
    def _manage_historical_cache(self):
        """Menu de gerenciamento de cache de dados hist√≥ricos"""
        console = Console()
        
        while True:
            print("\n" + "="*80)
            print("üìÅ GERENCIAMENTO DE CACHE DE DADOS HIST√ìRICOS")
            print("="*80)
            
            print("\nüí° Gerencie os dados hist√≥ricos salvos em cache")
            print("\nüìã OP√á√ïES:")
            print("   1Ô∏è‚É£  Ver dados salvos")
            print("   2Ô∏è‚É£  Limpar cache espec√≠fico")
            print("   3Ô∏è‚É£  Limpar todo cache")
            print("   4Ô∏è‚É£  Estat√≠sticas de uso")
            print("   0Ô∏è‚É£  Voltar")
            
            choice = input("\nüî¢ Escolha uma op√ß√£o (0-4): ").strip()
            
            if choice == '0':
                break
            elif choice == '1':
                self._view_cached_data(console)
            elif choice == '2':
                self._delete_specific_cache(console)
            elif choice == '3':
                self._clear_all_cache()
            elif choice == '4':
                self._show_cache_statistics()
            else:
                print("‚ùå Op√ß√£o inv√°lida")
                input("\nüìñ Pressione ENTER para continuar...")
    
    def _view_cached_data(self, console: Console):
        """Visualiza todos os dados em cache usando Rich Table"""
        print("\nüìä DADOS SALVOS EM CACHE")
        print("="*80)
        
        cached_datasets = self.cache.list_cached_datasets()
        
        if not cached_datasets:
            print("\n‚ö†Ô∏è  Nenhum dado em cache encontrado")
            input("\nüìñ Pressione ENTER para continuar...")
            return
        
        table = Table(title=f"Cache de Dados Hist√≥ricos ({len(cached_datasets)} datasets)")
        
        table.add_column("#", justify="right", style="cyan", no_wrap=True)
        table.add_column("S√≠mbolo", style="yellow", no_wrap=True)
        table.add_column("Interval", style="green", no_wrap=True)
        table.add_column("Per√≠odo", style="blue")
        table.add_column("Candles", justify="right", style="magenta")
        table.add_column("Tamanho", justify="right", style="cyan")
        table.add_column("Data Cache", style="white")
        
        for i, dataset in enumerate(cached_datasets, 1):
            symbol = dataset.get("symbol", "N/A")
            interval = dataset.get("interval", "N/A")
            start_date = dataset.get("start_date", "N/A")
            end_date = dataset.get("end_date", "N/A")
            candles = dataset.get("candles", 0)
            file_size = dataset.get("file_size_kb", 0)
            cached_at = dataset.get("cached_at", "N/A")
            
            period = f"{start_date} ‚Üí {end_date}"
            
            if cached_at != "N/A":
                try:
                    cached_dt = datetime.fromisoformat(cached_at)
                    cached_at_str = cached_dt.strftime("%Y-%m-%d %H:%M")
                except:
                    cached_at_str = cached_at
            else:
                cached_at_str = "N/A"
            
            table.add_row(
                str(i),
                symbol,
                interval,
                period,
                f"{candles:,}",
                f"{file_size:.2f} KB",
                cached_at_str
            )
        
        console.print(table)
        input("\nüìñ Pressione ENTER para continuar...")
    
    def _delete_specific_cache(self, console: Console):
        """Remove um cache espec√≠fico selecionado pelo usu√°rio"""
        print("\nüóëÔ∏è  LIMPAR CACHE ESPEC√çFICO")
        print("="*80)
        
        cached_datasets = self.cache.list_cached_datasets()
        
        if not cached_datasets:
            print("\n‚ö†Ô∏è  Nenhum dado em cache encontrado")
            input("\nüìñ Pressione ENTER para continuar...")
            return
        
        table = Table(title="Selecione o cache para remover")
        
        table.add_column("#", justify="right", style="cyan", no_wrap=True)
        table.add_column("S√≠mbolo", style="yellow", no_wrap=True)
        table.add_column("Interval", style="green", no_wrap=True)
        table.add_column("Per√≠odo", style="blue")
        table.add_column("Tamanho", justify="right", style="cyan")
        
        for i, dataset in enumerate(cached_datasets, 1):
            symbol = dataset.get("symbol", "N/A")
            interval = dataset.get("interval", "N/A")
            start_date = dataset.get("start_date", "N/A")
            end_date = dataset.get("end_date", "N/A")
            file_size = dataset.get("file_size_kb", 0)
            
            period = f"{start_date} ‚Üí {end_date}"
            
            table.add_row(
                str(i),
                symbol,
                interval,
                period,
                f"{file_size:.2f} KB"
            )
        
        console.print(table)
        
        choice = input(f"\nüî¢ Escolha o n√∫mero do cache para remover (1-{len(cached_datasets)}) ou 0 para cancelar: ").strip()
        
        if choice == '0':
            print("\n‚ùå Opera√ß√£o cancelada")
            input("\nüìñ Pressione ENTER para continuar...")
            return
        
        try:
            index = int(choice) - 1
            if 0 <= index < len(cached_datasets):
                dataset = cached_datasets[index]
                cache_key = dataset.get("key")
                
                if not cache_key:
                    print("\n‚ùå Chave de cache inv√°lida")
                    input("\nüìñ Pressione ENTER para continuar...")
                    return
                
                confirm = input(f"\n‚ö†Ô∏è  Tem certeza que deseja remover o cache '{cache_key}'? (s/n): ").strip().lower()
                
                if confirm == 's':
                    if self.cache.delete(cache_key):
                        print(f"\n‚úÖ Cache '{cache_key}' removido com sucesso")
                    else:
                        print(f"\n‚ùå Erro ao remover cache '{cache_key}'")
                else:
                    print("\n‚ùå Opera√ß√£o cancelada")
            else:
                print("\n‚ùå N√∫mero inv√°lido")
        except ValueError:
            print("\n‚ùå Digite um n√∫mero v√°lido")
        
        input("\nüìñ Pressione ENTER para continuar...")
    
    def _clear_all_cache(self):
        """Remove todos os caches"""
        print("\nüßπ LIMPAR TODO CACHE")
        print("="*80)
        
        cached_datasets = self.cache.list_cached_datasets()
        
        if not cached_datasets:
            print("\n‚ö†Ô∏è  Nenhum dado em cache encontrado")
            input("\nüìñ Pressione ENTER para continuar...")
            return
        
        print(f"\n‚ö†Ô∏è  Voc√™ est√° prestes a remover TODOS os {len(cached_datasets)} datasets em cache")
        
        total_size = sum(dataset.get("file_size_kb", 0) for dataset in cached_datasets)
        print(f"   üì¶ Total de espa√ßo a ser liberado: {total_size:.2f} KB ({total_size/1024:.2f} MB)")
        
        confirm = input("\n‚ö†Ô∏è  Tem certeza que deseja limpar TODO o cache? (s/n): ").strip().lower()
        
        if confirm == 's':
            self.cache.clear_all()
            print("\n‚úÖ Todo o cache foi limpo com sucesso")
        else:
            print("\n‚ùå Opera√ß√£o cancelada")
        
        input("\nüìñ Pressione ENTER para continuar...")
    
    def _show_cache_statistics(self):
        """Mostra estat√≠sticas de uso do cache"""
        print("\nüìà ESTAT√çSTICAS DE USO DO CACHE")
        print("="*80)
        
        cached_datasets = self.cache.list_cached_datasets()
        
        total_files = len(cached_datasets)
        total_size_kb = sum(dataset.get("file_size_kb", 0) for dataset in cached_datasets)
        total_size_mb = total_size_kb / 1024
        total_candles = sum(dataset.get("candles", 0) for dataset in cached_datasets)
        
        print(f"\nüì¶ ARMAZENAMENTO:")
        print(f"   üìÅ Total de arquivos: {total_files}")
        print(f"   üíæ Espa√ßo total usado: {total_size_kb:.2f} KB ({total_size_mb:.2f} MB)")
        print(f"   üìä Total de candles: {total_candles:,}")
        
        if total_files > 0:
            avg_size = total_size_kb / total_files
            avg_candles = total_candles / total_files
            print(f"   üìè Tamanho m√©dio por arquivo: {avg_size:.2f} KB")
            print(f"   üìä M√©dia de candles por arquivo: {avg_candles:.0f}")
        
        print(f"\nüéØ ESTAT√çSTICAS DA SESS√ÉO:")
        print(f"   ‚úÖ Cache Hits: {self.cache_stats['hits']}")
        print(f"   ‚ùå Cache Misses: {self.cache_stats['misses']}")
        print(f"   üí∞ Chamadas API economizadas: {self.cache_stats['api_calls_saved']}")
        
        total_requests = self.cache_stats['hits'] + self.cache_stats['misses']
        if total_requests > 0:
            hit_rate = (self.cache_stats['hits'] / total_requests) * 100
            print(f"   üìà Taxa de acerto: {hit_rate:.1f}%")
        
        if cached_datasets:
            print(f"\nüìã DATASETS POR S√çMBOLO:")
            symbols = {}
            for dataset in cached_datasets:
                symbol = dataset.get("symbol", "N/A")
                if symbol not in symbols:
                    symbols[symbol] = 0
                symbols[symbol] += 1
            
            for symbol, count in sorted(symbols.items()):
                print(f"   ü™ô {symbol}: {count} dataset(s)")
        
        input("\nüìñ Pressione ENTER para continuar...")
    
    def _fetch_historical_klines(self, symbol: str, interval: str, start_date: Optional[str] = None, end_date: Optional[str] = None) -> Tuple[List, Dict]:
        """
        Busca TODOS os candles do per√≠odo especificado, fazendo m√∫ltiplas chamadas se necess√°rio.
        Utiliza cache para evitar chamadas desnecess√°rias √† API.
        
        Args:
            symbol: Par de trading (ex: BTCUSDT)
            interval: Timeframe (1, 5, 15, 60, 240, D)
            start_date: Data inicial no formato YYYY-MM-DD (opcional)
            end_date: Data final no formato YYYY-MM-DD (opcional)
        
        Returns:
            Tuple[List, Dict]: (Lista com todos os candles, Dicion√°rio com m√©tricas da API)
        """
        # Calcular timestamps
        if start_date and end_date:
            start_ts = int(datetime.strptime(start_date, "%Y-%m-%d").timestamp() * 1000)
            end_ts = int(datetime.strptime(end_date, "%Y-%m-%d").timestamp() * 1000)
            cache_start_date = start_date
            cache_end_date = end_date
        else:
            # Per√≠odo padr√£o: √∫ltimos 30 dias
            end_ts = int(datetime.now().timestamp() * 1000)
            start_ts = end_ts - (30 * 24 * 60 * 60 * 1000)
            # Converter timestamps para formato YYYY-MM-DD para cache
            cache_start_date = datetime.fromtimestamp(start_ts / 1000).strftime("%Y-%m-%d")
            cache_end_date = datetime.fromtimestamp(end_ts / 1000).strftime("%Y-%m-%d")
        
        # Calcular dura√ß√£o de um candle em milissegundos
        timeframe_ms = {
            "1": 60 * 1000,
            "5": 5 * 60 * 1000,
            "15": 15 * 60 * 1000,
            "60": 60 * 60 * 1000,
            "240": 4 * 60 * 60 * 1000,
            "D": 24 * 60 * 60 * 1000
        }
        
        candle_duration = timeframe_ms.get(interval, 60 * 1000)
        
        # Calcular quantos candles s√£o necess√°rios
        total_candles_needed = int((end_ts - start_ts) / candle_duration)
        
        print(f"   üìä Per√≠odo requer ~{total_candles_needed} candles")
        
        # TENTAR BUSCAR DO CACHE PRIMEIRO
        cache_key = self.cache._generate_cache_key(symbol, interval, cache_start_date, cache_end_date)
        cached_data = self.cache.get(symbol, interval, cache_start_date, cache_end_date)
        
        if cached_data:
            # CACHE HIT
            self.cache_stats["hits"] += 1
            self.cache_stats["api_calls_saved"] += 1
            print(f"   ‚úÖ Cache HIT: {cache_key} ({len(cached_data)} candles)")
            
            # Determinar per√≠odo exato dos dados
            first_candle_time = datetime.fromtimestamp(int(cached_data[0][0]) / 1000)
            last_candle_time = datetime.fromtimestamp(int(cached_data[-1][0]) / 1000)
            
            metrics = {
                "total_candles": len(cached_data),
                "successful_batches": 0,
                "failed_batches": 0,
                "total_batches": 0,
                "success_rate": 100.0,
                "first_candle_time": first_candle_time,
                "last_candle_time": last_candle_time,
                "data_source": "Cache (dados reais armazenados)",
                "cache_hit": True
            }
            
            return cached_data, metrics
        
        # CACHE MISS - Buscar da API
        self.cache_stats["misses"] += 1
        print(f"   üì• Cache MISS: buscando API...")
        
        # Buscar dados em lotes de 500 (limite da API)
        all_klines = []
        current_start = start_ts
        batch_num = 1
        
        # M√©tricas da API
        successful_batches = 0
        failed_batches = 0
        
        while current_start < end_ts:
            # Calcular quantos candles faltam
            remaining_ms = end_ts - current_start
            remaining_candles = int(remaining_ms / candle_duration)
            limit = min(500, remaining_candles)
            
            if limit <= 0:
                break
            
            print(f"   üì° Batch {batch_num}: Buscando {limit} candles a partir de {datetime.fromtimestamp(current_start/1000).strftime('%Y-%m-%d %H:%M')}...")
            
            # Buscar dados com startTime
            try:
                klines = self.data_provider.get_kline(
                    category='spot',
                    symbol=symbol,
                    interval=interval,
                    limit=limit,
                    start=current_start,
                    end=end_ts
                )
                
                if not klines:
                    print(f"   ‚ö†Ô∏è  Nenhum dado retornado para este batch")
                    failed_batches += 1
                    break
                
                all_klines.extend(klines)
                successful_batches += 1
                print(f"   ‚úÖ Recebidos {len(klines)} candles (total acumulado: {len(all_klines)})")
                
                # Pr√≥ximo batch come√ßa ap√≥s o √∫ltimo candle recebido
                last_candle_time = int(klines[-1][0])
                current_start = last_candle_time + candle_duration
                batch_num += 1
                
                # Evitar rate limit
                time.sleep(0.1)
            except Exception as e:
                print(f"   ‚ùå Erro no batch {batch_num}: {str(e)}")
                failed_batches += 1
                break
        
        # Salvar dados no cache para futuros usos
        if all_klines:
            print(f"   üíæ Salvando dados no cache...")
            self.cache.save(symbol, interval, cache_start_date, cache_end_date, all_klines)
        
        # Calcular m√©tricas
        total_batches = successful_batches + failed_batches
        success_rate = (successful_batches / total_batches * 100) if total_batches > 0 else 0
        
        # Determinar per√≠odo exato dos dados
        first_candle_time = None
        last_candle_time = None
        if all_klines:
            first_candle_time = datetime.fromtimestamp(int(all_klines[0][0]) / 1000)
            last_candle_time = datetime.fromtimestamp(int(all_klines[-1][0]) / 1000)
        
        metrics = {
            "total_candles": len(all_klines),
            "successful_batches": successful_batches,
            "failed_batches": failed_batches,
            "total_batches": total_batches,
            "success_rate": success_rate,
            "first_candle_time": first_candle_time,
            "last_candle_time": last_candle_time,
            "data_source": self.data_provider.__class__.__name__ if self.data_provider else "Unknown",
            "cache_hit": False
        }
        
        return all_klines, metrics
