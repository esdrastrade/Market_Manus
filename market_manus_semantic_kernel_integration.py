"""
Market Manus - Semantic Kernel Integration CORRECTED
Vers√£o corrigida baseada na documenta√ß√£o oficial do Semantic Kernel 1.37.0
Data: 24/09/2025
"""

import os
import sys
import json
import asyncio
import pandas as pd
import re
import logging
from datetime import datetime, timedelta
from typing import Dict, List, Optional, Any
from pathlib import Path

# Carregar vari√°veis de ambiente do arquivo .env
try:
    from dotenv import load_dotenv
    load_dotenv()
    print("‚úÖ Arquivo .env carregado com sucesso")
except ImportError:
    print("‚ö†Ô∏è python-dotenv n√£o instalado. Usando vari√°veis de ambiente do sistema.")

# Importa√ß√µes corretas do Semantic Kernel (vers√£o 1.37.0)
try:
    from semantic_kernel import Kernel
    from semantic_kernel.connectors.ai.open_ai import OpenAIChatCompletion
    from semantic_kernel.connectors.ai.function_choice_behavior import FunctionChoiceBehavior
    from semantic_kernel.connectors.ai.chat_completion_client_base import ChatCompletionClientBase
    from semantic_kernel.contents.chat_history import ChatHistory
    from semantic_kernel.functions.kernel_arguments import KernelArguments
    from semantic_kernel.functions import kernel_function
    from semantic_kernel.connectors.ai.open_ai.prompt_execution_settings.open_ai_prompt_execution_settings import (
        OpenAIChatPromptExecutionSettings,
    )
    print("‚úÖ Semantic Kernel importado com sucesso")
except ImportError as e:
    print(f"‚ö†Ô∏è Erro na importa√ß√£o do Semantic Kernel: {e}")
    print("üí° Continuando sem funcionalidades de IA...")

# Adicionar o diret√≥rio do projeto ao sys.path
project_root = Path(__file__).parent.absolute()
sys.path.insert(0, str(project_root))

# Importa√ß√µes do Market Manus
try:
    from market_manus.data_providers.bybit_real_data_provider import BybitRealDataProvider
    from market_manus.core.capital_manager import CapitalManager
    print("‚úÖ M√≥dulos do Market Manus importados com sucesso")
except ImportError as e:
    print(f"‚ùå Erro na importa√ß√£o dos m√≥dulos: {e}")
    sys.exit(1)

class MarketDataPlugin:
    """Plugin para dados de mercado"""
    
    def __init__(self, data_provider: BybitRealDataProvider):
        self.data_provider = data_provider
    
    @kernel_function(
        description="Obt√©m o pre√ßo atual de um s√≠mbolo de criptomoeda",
        name="obter_preco_atual"
    )
    async def obter_preco_atual(self, simbolo: str) -> str:
        """Obt√©m o pre√ßo atual de um s√≠mbolo."""
        try:
            ticker = self.data_provider.get_latest_price("spot", simbolo)
            if ticker:
                price = float(ticker['lastPrice'])
                change = float(ticker.get('price24hPcnt', 0)) * 100
                volume = float(ticker.get('volume24h', 0))
                return f"üí∞ {simbolo}: ${price:,.4f}\n" \
                       f"üìà Varia√ß√£o 24h: {change:+.2f}%\n" \
                       f"üìä Volume 24h: ${volume:,.0f}"
            else:
                return f"‚ùå S√≠mbolo {simbolo} n√£o encontrado"
        except Exception as e:
            return f"‚ùå Erro ao obter pre√ßo: {e}"
    
    @kernel_function(
        description="Obt√©m dados hist√≥ricos (klines) de um s√≠mbolo",
        name="obter_klines"
    )
    async def obter_klines(self, simbolo: str, timeframe: str, limite: str = "100") -> str:
        """Obt√©m klines de um s√≠mbolo."""
        try:
            limit = int(limite)
            
            # Mapear timeframes para formato Bybit
            timeframe_map = {
                "1m": "1",
                "5m": "5", 
                "15m": "15",
                "30m": "30",
                "1h": "60",
                "4h": "240",
                "1d": "D"
            }
            
            bybit_timeframe = timeframe_map.get(timeframe, "60")  # Default 1h
            
            klines = self.data_provider.get_kline(
                category="spot",
                symbol=simbolo,
                interval=bybit_timeframe,
                limit=limit
            )
            
            if klines:
                return f"‚úÖ Obtidos {len(klines)} candlesticks de {simbolo} ({timeframe})"
            else:
                return f"‚ùå N√£o foi poss√≠vel obter dados de {simbolo}"
        except Exception as e:
            return f"‚ùå Erro ao obter klines: {e}"

class StrategiesPlugin:
    """Plugin para estrat√©gias de trading"""
    
    def __init__(self, data_provider: BybitRealDataProvider):
        self.data_provider = data_provider
    
    def _get_klines_dataframe(self, simbolo: str, timeframe: str, limit: int = 100) -> pd.DataFrame:
        """Obt√©m klines e converte para DataFrame"""
        # Mapear timeframes para formato Bybit
        timeframe_map = {
            "1m": "1",
            "5m": "5", 
            "15m": "15",
            "30m": "30",
            "1h": "60",
            "4h": "240",
            "1d": "D"
        }
        
        bybit_timeframe = timeframe_map.get(timeframe, "60")
        
        klines = self.data_provider.get_kline(
            category="spot",
            symbol=simbolo,
            interval=bybit_timeframe,
            limit=limit
        )
        
        if not klines:
            return None
        
        # Converter para DataFrame
        df = pd.DataFrame(klines, columns=[
            "timestamp", "open", "high", "low", "close", "volume", "turnover"
        ])
        df["timestamp"] = pd.to_datetime(df["timestamp"], unit="ms")
        df.set_index("timestamp", inplace=True)
        
        for col in ["open", "high", "low", "close", "volume"]:
            df[col] = pd.to_numeric(df[col])
        
        return df
    
    def _calculate_ema(self, prices: pd.Series, period: int) -> pd.Series:
        """Calcula EMA"""
        return prices.ewm(span=period, adjust=False).mean()
    
    def _calculate_rsi(self, prices: pd.Series, period: int = 14) -> pd.Series:
        """Calcula RSI"""
        delta = prices.diff()
        gain = (delta.where(delta > 0, 0)).rolling(window=period).mean()
        loss = (-delta.where(delta < 0, 0)).rolling(window=period).mean()
        rs = gain / loss
        return 100 - (100 / (1 + rs))
    
    def _calculate_bollinger_bands(self, prices: pd.Series, period: int = 20, std: float = 2.0):
        """Calcula Bandas de Bollinger"""
        rolling_mean = prices.rolling(window=period).mean()
        rolling_std = prices.rolling(window=period).std()
        upper_band = rolling_mean + (rolling_std * std)
        lower_band = rolling_mean - (rolling_std * std)
        return upper_band, lower_band, rolling_mean
    
    @kernel_function(
        description="Executa a estrat√©gia EMA Crossover para an√°lise t√©cnica",
        name="ema_crossover"
    )
    async def ema_crossover(self, simbolo: str, timeframe: str, short: str = "9", long: str = "21") -> str:
        """Executa a estrat√©gia EMA Crossover."""
        try:
            # Obter dados
            df = self._get_klines_dataframe(simbolo, timeframe, 200)
            if df is None:
                return f"‚ùå N√£o foi poss√≠vel obter dados de {simbolo}"
            
            # Calcular EMAs
            short_period = int(short)
            long_period = int(long)
            
            df['ema_short'] = self._calculate_ema(df['close'], short_period)
            df['ema_long'] = self._calculate_ema(df['close'], long_period)
            
            # Gerar sinais
            df['signal'] = 0
            df.loc[df['ema_short'] > df['ema_long'], 'signal'] = 1  # Buy
            df.loc[df['ema_short'] < df['ema_long'], 'signal'] = -1  # Sell
            
            # Detectar mudan√ßas de sinal
            df['position'] = df['signal'].diff()
            
            # Contar sinais
            buy_signals = len(df[df['position'] == 2])  # Mudan√ßa de -1 para 1
            sell_signals = len(df[df['position'] == -2])  # Mudan√ßa de 1 para -1
            
            # Status atual
            current_price = df['close'].iloc[-1]
            current_ema_short = df['ema_short'].iloc[-1]
            current_ema_long = df['ema_long'].iloc[-1]
            current_signal = "COMPRA" if current_ema_short > current_ema_long else "VENDA"
            
            return f"‚úÖ EMA Crossover - {simbolo} ({timeframe})\n" \
                   f"üìä Par√¢metros: EMA r√°pida={short}, EMA lenta={long}\n" \
                   f"üí∞ Pre√ßo atual: ${current_price:.4f}\n" \
                   f"üìà EMA {short}: ${current_ema_short:.4f}\n" \
                   f"üìâ EMA {long}: ${current_ema_long:.4f}\n" \
                   f"üéØ Sinal atual: {current_signal}\n" \
                   f"üü¢ Sinais de compra: {buy_signals}\n" \
                   f"üî¥ Sinais de venda: {sell_signals}"
        
        except Exception as e:
            return f"‚ùå Erro na estrat√©gia EMA Crossover: {e}"
    
    @kernel_function(
        description="Executa a estrat√©gia RSI Mean Reversion para an√°lise t√©cnica",
        name="rsi_mean_reversion"
    )
    async def rsi_mean_reversion(self, simbolo: str, timeframe: str, period: str = "14", buy_th: str = "30", sell_th: str = "70") -> str:
        """Executa a estrat√©gia RSI Mean Reversion."""
        try:
            # Obter dados
            df = self._get_klines_dataframe(simbolo, timeframe, 200)
            if df is None:
                return f"‚ùå N√£o foi poss√≠vel obter dados de {simbolo}"
            
            # Calcular RSI
            rsi_period = int(period)
            buy_threshold = float(buy_th)
            sell_threshold = float(sell_th)
            
            df['rsi'] = self._calculate_rsi(df['close'], rsi_period)
            
            # Gerar sinais
            df['signal'] = 0
            df.loc[df['rsi'] < buy_threshold, 'signal'] = 1  # Buy (oversold)
            df.loc[df['rsi'] > sell_threshold, 'signal'] = -1  # Sell (overbought)
            
            # Contar sinais
            buy_signals = len(df[df['signal'] == 1])
            sell_signals = len(df[df['signal'] == -1])
            
            # Status atual
            current_price = df['close'].iloc[-1]
            current_rsi = df['rsi'].iloc[-1]
            
            if current_rsi < buy_threshold:
                current_signal = "COMPRA (Oversold)"
            elif current_rsi > sell_threshold:
                current_signal = "VENDA (Overbought)"
            else:
                current_signal = "NEUTRO"
            
            return f"‚úÖ RSI Mean Reversion - {simbolo} ({timeframe})\n" \
                   f"üìä Par√¢metros: Per√≠odo={period}, Compra<{buy_th}, Venda>{sell_th}\n" \
                   f"üí∞ Pre√ßo atual: ${current_price:.4f}\n" \
                   f"üìà RSI atual: {current_rsi:.2f}\n" \
                   f"üéØ Sinal atual: {current_signal}\n" \
                   f"üü¢ Sinais de compra: {buy_signals}\n" \
                   f"üî¥ Sinais de venda: {sell_signals}"
        
        except Exception as e:
            return f"‚ùå Erro na estrat√©gia RSI: {e}"
    
    @kernel_function(
        description="Executa a estrat√©gia Bollinger Bands Breakout para an√°lise t√©cnica",
        name="bollinger_breakout"
    )
    async def bollinger_breakout(self, simbolo: str, timeframe: str, period: str = "20", std: str = "2.0") -> str:
        """Executa a estrat√©gia Bollinger Bands Breakout."""
        try:
            # Obter dados
            df = self._get_klines_dataframe(simbolo, timeframe, 200)
            if df is None:
                return f"‚ùå N√£o foi poss√≠vel obter dados de {simbolo}"
            
            # Calcular Bollinger Bands
            bb_period = int(period)
            bb_std = float(std)
            
            df['upper_band'], df['lower_band'], df['middle_band'] = self._calculate_bollinger_bands(
                df['close'], bb_period, bb_std
            )
            
            # Gerar sinais
            df['signal'] = 0
            df.loc[df['close'] > df['upper_band'], 'signal'] = 1  # Buy breakout
            df.loc[df['close'] < df['lower_band'], 'signal'] = -1  # Sell breakout
            
            # Contar sinais
            buy_signals = len(df[df['signal'] == 1])
            sell_signals = len(df[df['signal'] == -1])
            
            # Status atual
            current_price = df['close'].iloc[-1]
            current_upper = df['upper_band'].iloc[-1]
            current_lower = df['lower_band'].iloc[-1]
            current_middle = df['middle_band'].iloc[-1]
            
            if current_price > current_upper:
                current_signal = "COMPRA (Breakout Superior)"
            elif current_price < current_lower:
                current_signal = "VENDA (Breakout Inferior)"
            else:
                current_signal = "NEUTRO (Dentro das Bandas)"
            
            return f"‚úÖ Bollinger Breakout - {simbolo} ({timeframe})\n" \
                   f"üìä Par√¢metros: Per√≠odo={period}, Desvio={std}\n" \
                   f"üí∞ Pre√ßo atual: ${current_price:.4f}\n" \
                   f"üìà Banda superior: ${current_upper:.4f}\n" \
                   f"üìä Banda m√©dia: ${current_middle:.4f}\n" \
                   f"üìâ Banda inferior: ${current_lower:.4f}\n" \
                   f"üéØ Sinal atual: {current_signal}\n" \
                   f"üü¢ Sinais de compra: {buy_signals}\n" \
                   f"üî¥ Sinais de venda: {sell_signals}"
        
        except Exception as e:
            return f"‚ùå Erro na estrat√©gia Bollinger: {e}"

class BacktestPlugin:
    """Plugin para backtesting"""
    
    def __init__(self, data_provider: BybitRealDataProvider, capital_manager: CapitalManager):
        self.data_provider = data_provider
        self.capital_manager = capital_manager
        self.strategies_plugin = StrategiesPlugin(data_provider)
    
    @kernel_function(
        description="Executa backtest completo de uma estrat√©gia de trading",
        name="backtest_estrategia"
    )
    async def backtest_estrategia(self, simbolo: str, timeframe: str, estrategia: str, dias: str = "30") -> str:
        """Executa backtest de uma estrat√©gia."""
        try:
            # Calcular limite de dados baseado no timeframe
            days = int(dias)
            if timeframe in ["1m", "5m"]:
                limit = min(1000, days * 24 * 12)  # 12 candles por hora para 5m
            elif timeframe in ["15m", "30m"]:
                limit = min(1000, days * 24 * 2)   # 2-4 candles por hora
            elif timeframe == "1h":
                limit = min(1000, days * 24)       # 24 candles por dia
            elif timeframe == "4h":
                limit = min(1000, days * 6)        # 6 candles por dia
            else:  # 1d
                limit = min(1000, days)             # 1 candle por dia
            
            # Obter dados
            df = self.strategies_plugin._get_klines_dataframe(simbolo, timeframe, limit)
            if df is None:
                return f"‚ùå N√£o foi poss√≠vel obter dados hist√≥ricos de {simbolo}"
            
            # Executar estrat√©gia
            if estrategia.lower() in ["ema", "ema_crossover"]:
                df['ema_short'] = self.strategies_plugin._calculate_ema(df['close'], 9)
                df['ema_long'] = self.strategies_plugin._calculate_ema(df['close'], 21)
                df['signal'] = 0
                df.loc[df['ema_short'] > df['ema_long'], 'signal'] = 1
                df.loc[df['ema_short'] < df['ema_long'], 'signal'] = -1
                strategy_name = "EMA Crossover"
                
            elif estrategia.lower() in ["rsi", "rsi_mean_reversion"]:
                df['rsi'] = self.strategies_plugin._calculate_rsi(df['close'], 14)
                df['signal'] = 0
                df.loc[df['rsi'] < 30, 'signal'] = 1
                df.loc[df['rsi'] > 70, 'signal'] = -1
                strategy_name = "RSI Mean Reversion"
                
            elif estrategia.lower() in ["bollinger", "bollinger_breakout"]:
                upper, lower, middle = self.strategies_plugin._calculate_bollinger_bands(df['close'], 20, 2.0)
                df['upper_band'] = upper
                df['lower_band'] = lower
                df['signal'] = 0
                df.loc[df['close'] > df['upper_band'], 'signal'] = 1
                df.loc[df['close'] < df['lower_band'], 'signal'] = -1
                strategy_name = "Bollinger Breakout"
                
            else:
                return f"‚ùå Estrat√©gia '{estrategia}' n√£o encontrada. Use: ema, rsi, bollinger"
            
            # Detectar mudan√ßas de posi√ß√£o
            df['position'] = df['signal'].diff()
            
            # Simular trades
            trades = []
            position = 0
            entry_price = 0
            
            for i, row in df.iterrows():
                if row['position'] != 0 and position == 0:  # Abrir posi√ß√£o
                    position = row['signal']
                    entry_price = row['close']
                    
                elif row['position'] != 0 and position != 0:  # Fechar posi√ß√£o
                    exit_price = row['close']
                    
                    # Calcular P&L
                    if position == 1:  # Long
                        pnl_pct = (exit_price - entry_price) / entry_price
                    else:  # Short
                        pnl_pct = (entry_price - exit_price) / entry_price
                    
                    trades.append({
                        'entry_price': entry_price,
                        'exit_price': exit_price,
                        'position': position,
                        'pnl_pct': pnl_pct,
                        'timestamp': i
                    })
                    
                    # Nova posi√ß√£o
                    position = row['signal']
                    entry_price = row['close']
            
            # Calcular m√©tricas
            if not trades:
                return f"‚ö†Ô∏è Nenhum trade executado para {simbolo} com {strategy_name}"
            
            total_trades = len(trades)
            winning_trades = len([t for t in trades if t['pnl_pct'] > 0])
            losing_trades = total_trades - winning_trades
            win_rate = (winning_trades / total_trades) * 100
            
            total_return = sum([t['pnl_pct'] for t in trades]) * 100
            avg_win = sum([t['pnl_pct'] for t in trades if t['pnl_pct'] > 0]) / max(winning_trades, 1) * 100
            avg_loss = sum([t['pnl_pct'] for t in trades if t['pnl_pct'] < 0]) / max(losing_trades, 1) * 100
            
            # Calcular capital final
            capital_inicial = self.capital_manager.current_capital
            position_size = self.capital_manager.get_position_size()
            total_pnl = sum([position_size * t['pnl_pct'] for t in trades])
            
            # Salvar relat√≥rio
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            report_data = {
                "timestamp": timestamp,
                "simbolo": simbolo,
                "timeframe": timeframe,
                "estrategia": strategy_name,
                "periodo_dias": days,
                "candlesticks_analisados": len(df),
                "total_trades": total_trades,
                "trades_vencedores": winning_trades,
                "trades_perdedores": losing_trades,
                "win_rate": win_rate,
                "retorno_total_pct": total_return,
                "retorno_medio_win": avg_win,
                "retorno_medio_loss": avg_loss,
                "capital_inicial": capital_inicial,
                "position_size": position_size,
                "pnl_total": total_pnl,
                "capital_final": capital_inicial + total_pnl,
                "roi_pct": (total_pnl / capital_inicial) * 100
            }
            
            # Salvar relat√≥rio
            reports_dir = Path("reports")
            reports_dir.mkdir(exist_ok=True)
            
            report_file = reports_dir / f"backtest_{estrategia}_{simbolo}_{timeframe}_{timestamp}.json"
            with open(report_file, 'w') as f:
                json.dump(report_data, f, indent=2, default=str)
            
            return f"‚úÖ BACKTEST CONCLU√çDO - {simbolo} ({timeframe})\n" \
                   f"üéØ Estrat√©gia: {strategy_name}\n" \
                   f"üìÖ Per√≠odo: {days} dias ({len(df)} candlesticks)\n" \
                   f"üìä Total de trades: {total_trades}\n" \
                   f"‚úÖ Trades vencedores: {winning_trades}\n" \
                   f"‚ùå Trades perdedores: {losing_trades}\n" \
                   f"üéØ Win rate: {win_rate:.1f}%\n" \
                   f"üìà Retorno total: {total_return:+.2f}%\n" \
                   f"üí∞ P&L total: ${total_pnl:+.2f}\n" \
                   f"üìä ROI: {(total_pnl/capital_inicial)*100:+.2f}%\n" \
                   f"üíµ Capital final: ${capital_inicial + total_pnl:.2f}\n" \
                   f"üìÅ Relat√≥rio: {report_file.name}"
        
        except Exception as e:
            return f"‚ùå Erro no backtest: {e}"

class MarketManusSemanticKernel:
    """Classe principal do Market Manus com Semantic Kernel"""
    
    def __init__(self):
        # Configurar APIs
        self.api_key = os.getenv("BYBIT_API_KEY", "")
        self.api_secret = os.getenv("BYBIT_API_SECRET", "")
        self.openai_api_key = os.getenv("OPENAI_API_KEY", "")
        
        print(f"üîë API Keys detectadas:")
        print(f"   Bybit API Key: {'‚úÖ Configurada' if self.api_key else '‚ùå N√£o encontrada'}")
        print(f"   OpenAI API Key: {'‚úÖ Configurada' if self.openai_api_key else '‚ùå N√£o encontrada'}")
        
        if not self.api_key or not self.api_secret:
            print("‚ùå Credenciais da API Bybit n√£o configuradas!")
            sys.exit(1)
        
        # Inicializar componentes
        self.data_provider = BybitRealDataProvider(
            api_key=self.api_key,
            api_secret=self.api_secret,
            testnet=False
        )
        
        self.capital_manager = CapitalManager(
            initial_capital=10000.0,
            position_size_pct=0.02
        )
        
        # Inicializar plugins
        self.market_data_plugin = MarketDataPlugin(self.data_provider)
        self.strategies_plugin = StrategiesPlugin(self.data_provider)
        self.backtest_plugin = BacktestPlugin(self.data_provider, self.capital_manager)
        
        # Inicializar Semantic Kernel
        self.kernel = None
        self.chat_completion = None
        self.chat_history = None
        
        if self.openai_api_key:
            try:
                self.kernel = Kernel()
                
                # Adicionar servi√ßo de chat OpenAI
                self.chat_completion = OpenAIChatCompletion(
                    ai_model_id="gpt-3.5-turbo",
                    api_key=self.openai_api_key
                )
                self.kernel.add_service(self.chat_completion)
                
                # Registrar plugins
                self._register_plugins()
                
                # Inicializar hist√≥rico de chat
                self.chat_history = ChatHistory()
                
                print("‚úÖ Semantic Kernel com IA completa inicializado!")
            except Exception as e:
                print(f"‚ö†Ô∏è Erro ao inicializar Semantic Kernel: {e}")
                self.kernel = None
        else:
            print("‚ö†Ô∏è OpenAI API Key n√£o configurada - Usando modo b√°sico")
    
    def _register_plugins(self):
        """Registra plugins no kernel"""
        if not self.kernel:
            return
        
        try:
            self.kernel.add_plugin(self.market_data_plugin, plugin_name="market_data")
            self.kernel.add_plugin(self.strategies_plugin, plugin_name="strategies")
            self.kernel.add_plugin(self.backtest_plugin, plugin_name="backtest")
            
            print("‚úÖ Plugins de IA registrados com sucesso")
        except Exception as e:
            print(f"‚ö†Ô∏è Erro ao registrar plugins: {e}")
    
    async def process_natural_language_command(self, command: str) -> str:
        """Processa comando em linguagem natural usando IA"""
        if not self.kernel or not self.chat_completion:
            return "‚ùå Semantic Kernel n√£o dispon√≠vel."
        
        try:
            # Configurar execution settings
            execution_settings = OpenAIChatPromptExecutionSettings()
            execution_settings.function_choice_behavior = FunctionChoiceBehavior.Auto()
            
            # Adicionar comando do usu√°rio ao hist√≥rico
            self.chat_history.add_user_message(command)
            
            # Obter resposta da IA com plugins
            result = await self.chat_completion.get_chat_message_content(
                chat_history=self.chat_history,
                settings=execution_settings,
                kernel=self.kernel,
            )
            
            # Adicionar resposta ao hist√≥rico
            self.chat_history.add_message(result)
            
            return str(result)
            
        except Exception as e:
            return f"‚ùå Erro ao processar comando com IA: {e}"
    
    def _process_simple_command(self, command: str) -> str:
        """Processa comandos simples sem IA com melhor reconhecimento"""
        command_lower = command.lower()
        
        # Extrair s√≠mbolo se mencionado
        simbolo = "BTCUSDT"  # Default
        if any(word in command_lower for word in ["eth", "ethereum"]):
            simbolo = "ETHUSDT"
        elif any(word in command_lower for word in ["bnb", "binance"]):
            simbolo = "BNBUSDT"
        elif any(word in command_lower for word in ["sol", "solana"]):
            simbolo = "SOLUSDT"
        elif any(word in command_lower for word in ["xrp", "ripple"]):
            simbolo = "XRPUSDT"
        
        # Comandos de pre√ßo
        if any(word in command_lower for word in ["pre√ßo", "preco", "price", "valor", "cota√ß√£o", "cotacao"]):
            # Usar m√©todo s√≠ncrono diretamente
            try:
                ticker = self.data_provider.get_latest_price("spot", simbolo)
                if ticker:
                    price = float(ticker['lastPrice'])
                    change = float(ticker.get('price24hPcnt', 0)) * 100
                    volume = float(ticker.get('volume24h', 0))
                    return f"üí∞ {simbolo}: ${price:,.4f}\n" \
                           f"üìà Varia√ß√£o 24h: {change:+.2f}%\n" \
                           f"üìä Volume 24h: ${volume:,.0f}"
                else:
                    return f"‚ùå S√≠mbolo {simbolo} n√£o encontrado"
            except Exception as e:
                return f"‚ùå Erro ao obter pre√ßo: {e}"
        
        # Comandos de estrat√©gias (usar m√©todos s√≠ncronos)
        elif any(word in command_lower for word in ["ema", "m√©dia", "media", "crossover"]):
            return asyncio.run(self.strategies_plugin.ema_crossover(simbolo, "1h"))
        
        elif any(word in command_lower for word in ["rsi", "revers√£o", "reversao", "mean reversion"]):
            return asyncio.run(self.strategies_plugin.rsi_mean_reversion(simbolo, "1h"))
        
        elif any(word in command_lower for word in ["bollinger", "banda", "breakout", "rompimento"]):
            return asyncio.run(self.strategies_plugin.bollinger_breakout(simbolo, "1h"))
        
        # Comandos de backtest
        elif any(word in command_lower for word in ["backtest", "teste", "hist√≥rico", "historico"]):
            # Determinar estrat√©gia
            if any(word in command_lower for word in ["ema", "m√©dia", "media"]):
                estrategia = "ema"
            elif any(word in command_lower for word in ["rsi"]):
                estrategia = "rsi"
            elif any(word in command_lower for word in ["bollinger", "banda"]):
                estrategia = "bollinger"
            else:
                estrategia = "ema"  # Default
            
            return asyncio.run(self.backtest_plugin.backtest_estrategia(simbolo, "1h", estrategia))
        
        # Comandos de dados
        elif any(word in command_lower for word in ["dados", "klines", "candlesticks", "hist√≥rico"]):
            return asyncio.run(self.market_data_plugin.obter_klines(simbolo, "1h"))
        
        else:
            return "‚ùì Comando n√£o reconhecido. Tente:\n" \
                   "üí∞ 'Pre√ßo do Bitcoin' ou 'Qual o pre√ßo do ETH?'\n" \
                   "üìä 'EMA Crossover Bitcoin' ou 'RSI Ethereum'\n" \
                   "üìà 'Backtest RSI Bitcoin' ou 'Teste Bollinger ETH'\n" \
                   "üìã 'Dados hist√≥ricos Bitcoin'"
    
    async def run_interactive_mode(self):
        """Executa modo interativo"""
        print("\nü§ñ MARKET MANUS - SEMANTIC KERNEL ASSISTANT")
        print("=" * 60)
        
        if self.kernel:
            print("üß† MODO IA COMPLETA ATIVADO")
            print("üí¨ Digite comandos em linguagem natural complexa")
        else:
            print("üîß MODO B√ÅSICO ATIVADO")
            print("üí¨ Digite comandos simples")
        
        print("üìä Exemplos:")
        print('   "Qual o pre√ßo atual do Bitcoin?"')
        print('   "Execute EMA Crossover no ETHUSDT"')
        print('   "Fa√ßa backtest do RSI no Bitcoin por 30 dias"')
        print('   "Bollinger Breakout Ethereum timeframe 4h"')
        print("   'sair' para encerrar")
        print("=" * 60)
        
        while True:
            try:
                command = input("\nüí¨ Voc√™: ").strip()
                
                if command.lower() in ['sair', 'exit', 'quit']:
                    print("üëã At√© logo!")
                    break
                
                if not command:
                    continue
                
                print("üîÑ Processando...")
                
                if self.kernel:
                    # Usar IA completa
                    response = await self.process_natural_language_command(command)
                else:
                    # Usar processamento b√°sico
                    response = self._process_simple_command(command)
                
                print(f"\nü§ñ Assistente: {response}")
                
            except KeyboardInterrupt:
                print("\nüëã At√© logo!")
                break
            except Exception as e:
                print(f"\n‚ùå Erro: {e}")

async def main():
    """Fun√ß√£o principal"""
    try:
        print("üöÄ Iniciando Market Manus Semantic Kernel...")
        
        # Testar conectividade
        print("üîÑ Testando conectividade...")
        
        sk_system = MarketManusSemanticKernel()
        
        # Testar API Bybit
        test_result = sk_system.data_provider.get_tickers(category="spot")
        if test_result:
            print("‚úÖ Bybit API conectada")
        else:
            print("‚ùå Problema na Bybit API")
        
        # Executar modo interativo
        await sk_system.run_interactive_mode()
        
    except KeyboardInterrupt:
        print("\nüëã Sistema encerrado pelo usu√°rio")
    except Exception as e:
        print(f"\n‚ùå Erro inesperado: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    asyncio.run(main())
