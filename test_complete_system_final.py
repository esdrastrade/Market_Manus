#!/usr/bin/env python3
"""
TESTE COMPLETO DO SISTEMA MARKET MANUS
Valida todas as funcionalidades implementadas
"""

import sys
import os
import logging
from datetime import datetime, timezone, timedelta
from pathlib import Path

# Configurar logging para testes
logging.basicConfig(level=logging.INFO, format='%(levelname)s: %(message)s')
logger = logging.getLogger(__name__)

def test_imports():
    """Testa todas as importa√ß√µes necess√°rias"""
    print("\\nüîç TESTANDO IMPORTA√á√ïES...")
    print("-" * 40)
    
    imports_to_test = [
        ('strategy_contract', 'Contrato de Estrat√©gias'),
        ('bybit_provider', 'Bybit Data Provider'),
        ('capital_persistence', 'Persist√™ncia de Capital'),
        ('strategy_lab', 'Strategy Lab'),
        ('market_manus_cli_complete', 'CLI Completo')
    ]
    
    success_count = 0
    
    for module_name, description in imports_to_test:
        try:
            __import__(module_name)
            print(f"‚úÖ {description}: OK")
            success_count += 1
        except ImportError as e:
            print(f"‚ùå {description}: FALHOU - {e}")
        except Exception as e:
            print(f"‚ö†Ô∏è {description}: ERRO - {e}")
    
    print(f"\\nüìä Resultado: {success_count}/{len(imports_to_test)} importa√ß√µes bem-sucedidas")
    return success_count == len(imports_to_test)


def test_strategy_contract():
    """Testa o contrato de estrat√©gias"""
    print("\\nüß™ TESTANDO CONTRATO DE ESTRAT√âGIAS...")
    print("-" * 40)
    
    try:
        from strategy_contract import list_available_strategies, STRATEGY_REGISTRY_V2, run_strategy
        import pandas as pd
        import numpy as np
        
        # Testar listagem de estrat√©gias
        strategies = list_available_strategies()
        print(f"‚úÖ Estrat√©gias dispon√≠veis: {len(strategies)}")
        
        for strategy in strategies[:3]:  # Testar primeiras 3
            print(f"   üìä {strategy}: {STRATEGY_REGISTRY_V2[strategy]['description']}")
        
        # Testar execu√ß√£o de estrat√©gia com dados simulados
        print("\\nüî¨ Testando execu√ß√£o de estrat√©gia...")
        
        # Criar dados simulados
        dates = pd.date_range(start='2024-01-01', periods=100, freq='1H')
        np.random.seed(42)  # Para resultados reproduz√≠veis
        
        data = {
            'timestamp': dates,
            'open': 45000 + np.random.randn(100) * 100,
            'high': 45100 + np.random.randn(100) * 100,
            'low': 44900 + np.random.randn(100) * 100,
            'close': 45000 + np.random.randn(100) * 100,
            'volume': 1000 + np.random.randn(100) * 100
        }
        
        df = pd.DataFrame(data)
        df['high'] = df[['open', 'close']].max(axis=1) + abs(np.random.randn(100) * 50)
        df['low'] = df[['open', 'close']].min(axis=1) - abs(np.random.randn(100) * 50)
        
        # Testar primeira estrat√©gia
        if strategies:
            first_strategy = strategies[0]
            result_df = run_strategy(first_strategy, df)
            
            print(f"‚úÖ Estrat√©gia {first_strategy} executada")
            print(f"   üìä Registros processados: {len(result_df)}")
            print(f"   üìà Sinais gerados: {(result_df['signal'] != 0).sum()}")
            print(f"   üí™ For√ßa m√©dia: {result_df['strength'].mean():.3f}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erro no teste de estrat√©gias: {e}")
        return False


def test_bybit_provider():
    """Testa o Bybit Data Provider"""
    print("\\nüîå TESTANDO BYBIT DATA PROVIDER...")
    print("-" * 40)
    
    try:
        from bybit_provider import BybitDataProvider
        
        provider = BybitDataProvider()
        print("‚úÖ BybitDataProvider inicializado")
        
        # Testar conex√£o
        connection_status = provider.test_connection()
        if connection_status['status'] == 'connected':
            print(f"‚úÖ Conex√£o: OK (Lat√™ncia: {connection_status['latency_ms']:.2f}ms)")
        else:
            print(f"‚ö†Ô∏è Conex√£o: {connection_status['status']} - {connection_status.get('error', 'N/A')}")
        
        # Testar pre√ßo atual (pode falhar sem credenciais)
        try:
            price = provider.get_current_price('BTCUSDT')
            print(f"‚úÖ Pre√ßo BTCUSDT: ${price:,.2f}")
        except Exception as e:
            print(f"‚ö†Ô∏è Pre√ßo atual: N√£o dispon√≠vel (normal sem credenciais) - {e}")
        
        # Testar dados hist√≥ricos
        try:
            end_time = datetime.now(timezone.utc)
            start_time = end_time - timedelta(hours=24)
            
            import pandas as pd
            df = provider.fetch_klines('BTCUSDT', '1h', 
                                     pd.Timestamp(start_time), pd.Timestamp(end_time))
            
            if not df.empty:
                print(f"‚úÖ Dados hist√≥ricos: {len(df)} registros coletados")
            else:
                print("‚ö†Ô∏è Dados hist√≥ricos: Vazios (normal sem credenciais)")
        except Exception as e:
            print(f"‚ö†Ô∏è Dados hist√≥ricos: Erro - {e}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erro no teste do Bybit Provider: {e}")
        return False


def test_capital_manager():
    """Testa o Capital Manager"""
    print("\\nüí∞ TESTANDO CAPITAL MANAGER...")
    print("-" * 40)
    
    try:
        from capital_persistence import CapitalManager, Trade
        
        # Inicializar com capital de teste
        capital_manager = CapitalManager()
        capital_manager.config.current_capital = 10000.0
        print("‚úÖ CapitalManager inicializado")
        
        # Testar resumo inicial
        summary = capital_manager.get_capital_summary()
        print(f"‚úÖ Capital inicial: ${summary['initial_capital']:,.2f}")
        print(f"‚úÖ Capital atual: ${summary['current_capital']:,.2f}")
        print(f"‚úÖ ROI: {summary['roi']:+.2f}%")
        
        # Testar c√°lculo de position size
        position_info = capital_manager.calculate_position_size(45000.0)
        print(f"‚úÖ Position size para BTC $45k: ${position_info['notional']:,.2f}")
        
        # Testar trade simulado
        test_trade = Trade(
            timestamp=datetime.now(timezone.utc),
            symbol='BTCUSDT',
            strategy='test_strategy',
            side='buy',
            entry_price=45000.0,
            exit_price=46000.0,
            pnl=200.0,
            fees=10.0,
            net_pnl=190.0
        )
        
        capital_manager.record_trade(test_trade)
        print("‚úÖ Trade de teste registrado")
        
        # Verificar atualiza√ß√£o do capital
        new_summary = capital_manager.get_capital_summary()
        print(f"‚úÖ Capital ap√≥s trade: ${new_summary['current_capital']:,.2f}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erro no teste do Capital Manager: {e}")
        return False


def test_strategy_lab():
    """Testa o Strategy Lab"""
    print("\\nüß™ TESTANDO STRATEGY LAB...")
    print("-" * 40)
    
    try:
        from strategy_lab import StrategyLab, BacktestConfig
        from bybit_provider import BybitDataProvider
        from capital_persistence import CapitalManager
        
        # Inicializar componentes
        data_provider = BybitDataProvider()
        capital_manager = CapitalManager()
        strategy_lab = StrategyLab(data_provider, capital_manager)
        
        print("‚úÖ StrategyLab inicializado")
        
        # Configurar teste b√°sico
        config = BacktestConfig(
            symbol="BTCUSDT",
            timeframe="1h",
            start_date=datetime.now(timezone.utc) - timedelta(days=7),
            end_date=datetime.now(timezone.utc),
            strategies=["rsi_mean_reversion"]
        )
        
        print(f"‚úÖ Configura√ß√£o de teste criada")
        print(f"   S√≠mbolo: {config.symbol}")
        print(f"   Timeframe: {config.timeframe}")
        print(f"   Per√≠odo: {config.start_date.date()} at√© {config.end_date.date()}")
        
        # Nota: N√£o executamos o backtest real para evitar depend√™ncia de dados externos
        print("‚ö†Ô∏è Backtest real n√£o executado (requer dados externos)")
        print("‚úÖ Strategy Lab estruturalmente v√°lido")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erro no teste do Strategy Lab: {e}")
        return False


def test_cli_system():
    """Testa o sistema CLI"""
    print("\\nüñ•Ô∏è TESTANDO SISTEMA CLI...")
    print("-" * 40)
    
    try:
        from market_manus_cli_complete import MarketManusCompleteSystem
        
        # Inicializar sistema (sem executar)
        system = MarketManusCompleteSystem()
        print("‚úÖ MarketManusCompleteSystem inicializado")
        
        # Testar componentes internos
        print(f"‚úÖ Data Provider: {type(system.data_provider).__name__}")
        print(f"‚úÖ Capital Manager: {type(system.capital_manager).__name__}")
        print(f"‚úÖ Strategy Lab: {type(system.strategy_lab).__name__}")
        
        # Testar configura√ß√µes
        print(f"‚úÖ S√≠mbolo atual: {system.current_symbol}")
        print(f"‚úÖ Timeframe atual: {system.current_timeframe}")
        print(f"‚úÖ Estrat√©gias selecionadas: {len(system.selected_strategies)}")
        
        # Testar per√≠odos pr√©-definidos
        periods = system.predefined_periods
        print(f"‚úÖ Per√≠odos pr√©-definidos: {len(periods)}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erro no teste do CLI: {e}")
        return False


def test_file_structure():
    """Testa estrutura de arquivos"""
    print("\\nüìÅ TESTANDO ESTRUTURA DE ARQUIVOS...")
    print("-" * 40)
    
    required_files = [
        'strategy_contract.py',
        'bybit_provider.py',
        'capital_persistence.py', 
        'strategy_lab.py',
        'market_manus_cli_complete.py'
    ]
    
    required_dirs = ['logs', 'reports', 'data']
    
    files_ok = 0
    dirs_ok = 0
    
    # Verificar arquivos
    for file in required_files:
        if Path(file).exists():
            size = Path(file).stat().st_size
            print(f"‚úÖ {file}: {size:,} bytes")
            files_ok += 1
        else:
            print(f"‚ùå {file}: N√£o encontrado")
    
    # Verificar/criar diret√≥rios
    for dir_name in required_dirs:
        dir_path = Path(dir_name)
        if dir_path.exists():
            print(f"‚úÖ {dir_name}/: Existe")
            dirs_ok += 1
        else:
            dir_path.mkdir(exist_ok=True)
            print(f"‚úÖ {dir_name}/: Criado")
            dirs_ok += 1
    
    print(f"\\nüìä Arquivos: {files_ok}/{len(required_files)}")
    print(f"üìä Diret√≥rios: {dirs_ok}/{len(required_dirs)}")
    
    return files_ok == len(required_files) and dirs_ok == len(required_dirs)


def run_comprehensive_test():
    """Executa teste abrangente do sistema"""
    print("üöÄ MARKET MANUS - TESTE COMPLETO DO SISTEMA")
    print("=" * 60)
    print(f"‚è∞ Iniciado em: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    print("=" * 60)
    
    tests = [
        ("Estrutura de Arquivos", test_file_structure),
        ("Importa√ß√µes", test_imports),
        ("Contrato de Estrat√©gias", test_strategy_contract),
        ("Bybit Data Provider", test_bybit_provider),
        ("Capital Manager", test_capital_manager),
        ("Strategy Lab", test_strategy_lab),
        ("Sistema CLI", test_cli_system)
    ]
    
    results = []
    
    for test_name, test_func in tests:
        try:
            result = test_func()
            results.append((test_name, result))
        except Exception as e:
            print(f"üí• Erro cr√≠tico em {test_name}: {e}")
            results.append((test_name, False))
    
    # Resumo final
    print("\\n" + "=" * 60)
    print("üìä RESUMO DOS TESTES")
    print("=" * 60)
    
    passed = 0
    total = len(results)
    
    for test_name, result in results:
        status = "‚úÖ PASSOU" if result else "‚ùå FALHOU"
        print(f"{status} {test_name}")
        if result:
            passed += 1
    
    print("-" * 60)
    print(f"üìä Resultado Final: {passed}/{total} testes aprovados")
    
    if passed == total:
        print("üéâ TODOS OS TESTES PASSARAM!")
        print("‚úÖ Sistema Market Manus est√° funcionando corretamente")
        print("üöÄ Pronto para uso!")
    elif passed >= total * 0.8:  # 80% ou mais
        print("‚ö†Ô∏è MAIORIA DOS TESTES PASSOU")
        print("‚úÖ Sistema funcional com algumas limita√ß√µes")
        print("üîß Verifique os testes que falharam")
    else:
        print("‚ùå MUITOS TESTES FALHARAM")
        print("üõ†Ô∏è Sistema precisa de corre√ß√µes antes do uso")
        print("üìã Revise a instala√ß√£o e depend√™ncias")
    
    print("=" * 60)
    print(f"‚è∞ Conclu√≠do em: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    
    return passed, total


if __name__ == "__main__":
    try:
        passed, total = run_comprehensive_test()
        
        # Perguntar se quer executar o sistema
        if passed >= total * 0.8:  # Se 80% ou mais dos testes passaram
            print("\\nüöÄ EXECUTAR SISTEMA AGORA?")
            choice = input("Digite 's' para executar o Market Manus: ").strip().lower()
            
            if choice == 's':
                print("\\n" + "="*60)
                print("üöÄ INICIANDO MARKET MANUS...")
                print("="*60)
                
                # Importar e executar sistema
                from market_manus_cli_complete import MarketManusCompleteSystem
                system = MarketManusCompleteSystem()
                system.run()
        
    except KeyboardInterrupt:
        print("\\n\\n‚ö†Ô∏è Teste interrompido pelo usu√°rio")
    except Exception as e:
        print(f"\\nüí• Erro cr√≠tico no teste: {e}")
        logger.exception("Erro detalhado:")
